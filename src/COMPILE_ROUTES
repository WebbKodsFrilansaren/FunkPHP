#!/usr/bin/env php
<?php // Include all CLI Functions needed to manage FunkPHP CLI!
include __DIR__ . '/funkphp/_internals/functions/cli_funs.php';

// Validate arguments
$validArg1withArg2Values =  [
    'compile' => ['all', 'route', 'page', 'data'],
    'add' => ['route', 'page', 'data'],
    'change' => ['route', 'page', 'data'],
    'delete' => ['route', 'page', 'data'],
];

if (!isset($argv[1]) || !isset($argv[2])) {
    cli_err_syntax("No FunkPHP Command was given?!\nShould be at least two arguments!");
    exit;
}
if (!array_key_exists($argv[1], $validArg1withArg2Values)) {
    cli_err_syntax("That FunkPHP Command doesn't exist!");
    exit;
}
if (!in_array($argv[2], $validArg1withArg2Values[$argv[1]])) {
    cli_err_syntax("FunkPHP Command exist, but not that sub-command!");
    exit;
}


$outPutDir = __DIR__ . '/funkphp/_internals/compiled/';
$singleRoutesRoute = include __DIR__ . '/funkphp/routes/route_single_routes.php';
$singleRoutesData = include __DIR__ . '/funkphp/data/data_single_routes.php';
$singleRoutesPage = include __DIR__ . '/funkphp/pages/page_single_routes.php';
$middlewareRoutesRoute = include  __DIR__ . '/funkphp/routes/route_middleware_routes.php';
$middlewareRoutesData = include __DIR__ . '/funkphp/data/data_middleware_routes.php';
$middlewareRoutesPage = include __DIR__ . '/funkphp/pages/page_middleware_routes.php';

// Compile only based on user input
// Compile all routes
// Define the command actions map
$commands = [
    'compile' => [
        'all' => function () use (
            $singleRoutesRoute,
            $middlewareRoutesRoute,
            $singleRoutesPage,
            $middlewareRoutesPage,
            $singleRoutesData,
            $middlewareRoutesData,
            $outPutDir
        ) {
            $compiledRouteRoutes = cli_build_compiled_routes($singleRoutesRoute, $middlewareRoutesRoute);
            $compiledPageRoutes = cli_build_compiled_routes($singleRoutesPage, $middlewareRoutesPage);
            $compiledDataRoutes = cli_build_compiled_routes($singleRoutesData, $middlewareRoutesData);
            cli_output_compiled_routes($compiledRouteRoutes, "troute_route");
            cli_output_compiled_routes($compiledPageRoutes, "troute_page");
            cli_output_compiled_routes($compiledDataRoutes, "troute_data");
            cli_success("All routes compiled successfully!");
        },
        'route' => function () use ($singleRoutesRoute, $middlewareRoutesRoute, $outPutDir) {
            $compiledRouteRoutes = cli_build_compiled_routes($singleRoutesRoute, $middlewareRoutesRoute);
            cli_output_compiled_routes($compiledRouteRoutes, "troute_route");
            cli_success("Compiled Only Route routes!");
        },
        'page' => function () use ($singleRoutesPage, $middlewareRoutesPage, $outPutDir) {
            $compiledPageRoutes = cli_build_compiled_routes($singleRoutesPage, $middlewareRoutesPage);
            cli_output_compiled_routes($compiledPageRoutes, "troute_page");
            cli_success("Compiled Only Page routes!");
            echo "\033[32m[INFO]: Compiled Only Page routes!\n";
        },
        'data' => function () use ($singleRoutesData, $middlewareRoutesData, $outPutDir) {
            $compiledDataRoutes = cli_build_compiled_routes($singleRoutesData, $middlewareRoutesData);
            cli_output_compiled_routes($compiledDataRoutes, "troute_data");
            cli_success("Compiled Only Data routes!");
        },
    ],
    'add' => [
        'route' => function () {
            cli_info("[INFO]: Adding route routes (not implemented yet)");
        },
        'page' => function () {
            cli_info("[INFO]: Adding page routes (not implemented yet)");
        },
        'data' => function () {
            cli_info("[INFO]: Adding data routes (not implemented yet)");
        },
    ],
    'change' => [
        'route' => function () {
            cli_info("[INFO]: Changing route routes (not implemented yet)");
        },
        'page' => function () {
            cli_info("[INFO]: Changing page routes (not implemented yet)");
        },
        'data' => function () {
            cli_info("[INFO]: Changing data routes (not implemented yet)");
        },
    ],
    'delete' => [
        'route' => function () {
            cli_info("[INFO]: Deleting route routes (not implemented yet)");;
        },
        'page' => function () {
            cli_info("[INFO]: Deleting page routes (not implemented yet)");
        },
        'data' => function () {
            cli_info("[INFO]: Deleting data routes (not implemented yet)");;
        },
    ],
];

// Execute the command
$command = $argv[1];
$action = $argv[2];
$value = $argv[3] ?? null; // Optional third argument

if (isset($commands[$command][$action])) {
    $commands[$command][$action]();
} else {
    echo "\033[31m[ERROR]: Invalid command or action.\n"; // This should not happen due to validation
}
exit;
?>