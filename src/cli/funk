<?php // Define default directories and check whether CLI or
// in Web Browser mode (only JSON is allowed in Browser mode)
// After that we set the default values for command & arguments
define('PROJECT_DIR', dirname(__DIR__));
define('BACKUPS_DIR', PROJECT_DIR . '/backups');
define('CLI_DIR', __DIR__);
define('FUNKPHP_DIR', PROJECT_DIR . '/funkphp');
define('GUI_DIR', PROJECT_DIR . '/gui');
define('PUBLIC_DIR', PROJECT_DIR . '/public_html');
$JSON = false;
$command = null;
$arg1 = null;
$arg2 = null;
$arg3 = null;
$arg4 = null;
$arg5 = null;

// Define message types and ANSI colors for CLI output
// but that can also be parsed by returned JSON Response
define('MSG_TYPE_ERROR', 'ERROR');
define('MSG_TYPE_SUCCESS', 'SUCCESS');
define('MSG_TYPE_INFO', 'INFO');
define('MSG_TYPE_WARNING', 'WARNING');
define('MSG_TYPE_IMPORTANT', 'IMPORTANT');
define('MSG_TYPE_SYNTAX_ERROR', 'SYNTAX_ERROR');
define('ANSI_RED', "\033[31m");
define('ANSI_GREEN', "\033[32m");
define('ANSI_YELLOW', "\033[33m");
define('ANSI_BLUE', "\033[34m");
define('ANSI_RESET', "\033[0m");
global $funk_response_messages;
$funk_response_messages = [];

// CLI Mode
if (php_sapi_name() === 'cli') {
    $command = $argv[1] ?? null;
    $arg1 = $argv[2] ?? null;
    $arg2 = $argv[3] ?? null;
    $arg3 = $argv[4] ?? null;
    $arg4 = $argv[5] ?? null;
    $arg5 = $argv[6] ?? null;
}
// JSON Mode
else {
    $JSON = true;
    header('Content-Type: application/json');
    $payload = json_decode(file_get_contents('php://input'), true) ?? [];
    $command = $payload['command'] ?? null;
    $arg1 = $payload['arg1'] ?? null;
    $arg2 = $payload['arg2'] ?? null;
    $arg3 = $payload['arg3'] ?? null;
    $arg4 = $payload['arg4'] ?? null;
    $arg5 = $payload['arg5'] ?? null;
}
define("JSON_MODE", $JSON);
// If we are in JSON_MODE We then check that the REMOTE_ADDR is set and is either
// localhost or 127.0.0.1 since this should ONLY be ran in local development
if (JSON_MODE) {
    if (!isset($_SERVER['REMOTE_ADDR']) || !in_array($_SERVER['REMOTE_ADDR'], ['127.0.0.1', 'localhost'])) {
        http_response_code(403);
        echo json_encode(['error' => 'FunkCLI will ONLY accept using `127.0.0.1` or `localhost` as your Local IP!']);
        exit;
    }
    if (!isset($_SERVER['HTTP_ACCEPT']) || $_SERVER['HTTP_ACCEPT'] !== 'application/json') {
        http_response_code(406);
        echo json_encode(['error' => 'FunkCLI will ONLY accept `application/json` as value for the `Accept` Header!']);
        exit;
    }
}

// Try including files or throw an error if they are not found
if (
    !file_exists(CLI_DIR . '/cli_funs.php')
    || !file_exists(CLI_DIR . '/cli_funs2.php')
) {
    if (JSON_MODE) {
        http_response_code(500);
        echo json_encode([
            'type' => 'ERROR',
            'message' => 'FunkPHP CLI Function File(s) - either `cli_funs.php`, `cli_funs2.php` or both - NOT FOUND in `src/cli` Directory!'
        ]);
        exit;
    } else {
        echo "\033[31m[FunkCLI - ERROR]: FunkPHP CLI Function File(s) - either `cli_funs.php`, `cli_funs2.php` or both - NOT FOUND in `src/cli` Directory!\n\033[0m";
        exit;
    }
}
include CLI_DIR . '/cli_funs.php';
include CLI_DIR . '/cli_funs2.php';

// Load the settings file if it exists, otherwise use default settings
$settings = include CLI_DIR . '/funksettings' ?? [
    // Default settings for FunkCLI. "ALWAYS_BACKUP_IN" is a list of all the backup settings for the CLI.
    // It is used to determine which files should be backed up when the CLI runs backup-related commands.
    // DO NOT DELETE THIS PART. IT IS REQUIRED FOR THE CLI TO WORK PROPERLY. Change values to true or false.
    // Default is to always backup everything except the actual data handler files and middleware files as of now.
    "ALWAYS_BACKUP_IN" =>
    [
        "COMPILED_IN_BACKUPS" => false,
        "COMPILED_IN_FINAL_BACKUPS" => false,
        "DATA_IN_BACKUPS" => false,
        "DATA_IN_FINAL_BACKUPS" => false,
        "DATA_HANDLERS_IN_BACKUPS" => false,
        "DATA_HANDLERS_IN_FINAL_BACKUPS" => false,
        "DATA_MWS_IN_BACKUPS" => false,
        "DATA_MWS_IN_FINAL_BACKUPS" => false,
        "PAGES_IN_BACKUPS" => false,
        "PAGES_IN_FINAL_BACKUPS" => false,
        "PAGES_HANDLERS_IN_BACKUPS" => false,
        "PAGES_HANDLERS_IN_FINAL_BACKUPS" => false,
        "PAGES_MWS_IN_BACKUPS" => false,
        "PAGES_MWS_IN_FINAL_BACKUPS" => false,
        "ROUTES_IN_BACKUPS" => false,
        "ROUTES_IN_FINAL_BACKUPS" => false,
        "ROUTES_HANDLERS_IN_BACKUPS" => false,
        "ROUTES_HANDLERS_IN_FINAL_BACKUPS" => false,
        "ROUTES_MWS_IN_BACKUPS" => false,
        "ROUTES_MWS_IN_FINAL_BACKUPS" => false,
        "ALLOW_COMPLETE_BACKUP_DELETION" => false,
    ],
];

// All available dirs to use for the CLI
// & exact file paths to use for the CLI
$dirs = [
    "cli" => CLI_DIR . '/',
    "config" => FUNKPHP_DIR . '/config/',
    "config_blocked" => FUNKPHP_DIR . '/config/blocked/',
    "config_valid" => FUNKPHP_DIR . '/config/valid/',
    "_internals" => FUNKPHP_DIR . '/_internals/',
    "batteries" => FUNKPHP_DIR . '/_internals/batteries/',
    "compiled" => FUNKPHP_DIR . '/_internals/compiled/',
    "functions" => FUNKPHP_DIR . '/_internals/functions/',
    "_BACKUPS" => BACKUPS_DIR . '/',
    "pipeline" => FUNKPHP_DIR . '/pipeline/',
    "request" => FUNKPHP_DIR . '/pipeline/request/',
    "pipeline-request" => FUNKPHP_DIR . '/pipeline/request/',
    "post-request" => FUNKPHP_DIR . '/pipeline/post-request/',
    "pipeline-post-request" => FUNKPHP_DIR . '/pipeline/post-request/',
    "pipelines" => FUNKPHP_DIR . '/pipeline/',
    "routes" => FUNKPHP_DIR . '/routes/',
    "handlers" => FUNKPHP_DIR . '/handler/',
    "middlewares" => FUNKPHP_DIR . '/middlewares/',
    "data" => FUNKPHP_DIR . '/data/',
    "pages" => FUNKPHP_DIR . '/page/',
    "p_parts" => FUNKPHP_DIR . '/pages/partials/',
    "p_components" => FUNKPHP_DIR . '/page/components/',
    "p_complete" => FUNKPHP_DIR . '/page/complete/',
    "templates" => FUNKPHP_DIR . '/template/',
    "schemas" => FUNKPHP_DIR . '/schema/',
    "sql" => FUNKPHP_DIR . '/sql/',
    'validations' => FUNKPHP_DIR . '/validation/',
    "backups_finals" => BACKUPS_DIR . '/_FINAL_BACKUPS/',
    "backups_compiled" => BACKUPS_DIR . '/compiled/',
    "backups_routes" => BACKUPS_DIR . '/config/',
    "backups_data" => BACKUPS_DIR . '/data/',
    "backups_pages" => BACKUPS_DIR . '/page/',
    "backups_handlers" => BACKUPS_DIR . '/handler/',
    "backups_middlewares" => BACKUPS_DIR . '/middlewares/',
    "backups_templates" => BACKUPS_DIR . '/template/',
    "backups_cached" => BACKUPS_DIR . '/cached/',
    "backups_config" => BACKUPS_DIR . '/config/',
    "backups_pipeline" => BACKUPS_DIR . '/pipeline/',
    "backups_sql" => BACKUPS_DIR . '/sql/',
    "backups_tests" => BACKUPS_DIR . '/test/',
    "backups_validations" => BACKUPS_DIR . '/validation/',
];
$exactFiles = [
    "troute_route" => $dirs['compiled'] . "troute_route.php",
    "single_pipeline" => $dirs['pipeline'] . "pipeline.php",
    "single_routes" => $dirs['routes'] . "routes.php",
    "tables" => $dirs['config'] . "tables.php",
    "db_local" => $dirs['config'] . "db_config.php",
    "supported_mysql_data_types" => $dirs['config_valid'] . "valid_mysql_datatypes.php",
];

// List of all functions that are reserved for the framework and
// should not be used in the application code. They are checked against
// when adding any new kind of function that is already reserved.
$reserved_functions = [];
if (file_exists_is_readable_writable(CLI_DIR . '/cli_reserved.php')) {
    $reserved_functions = include_once CLI_DIR . '/cli_reserved.php';
} else {
    cli_info_without_exit("Reserved Functions List File `cli_reserved.php` NOT FOUND! Attempting to generate a new one...");
    $reserved_functions = cli_update_reserved_functions_list_and_return_as_array();
    cli_success_without_exit("Reserved Functions List File `cli_reserved.php` Generated Successfully. Continuing...");
}

// First restore the folders if they don't exist
cli_restore_default_folders_and_files();

// Load current pipeline, routes, data and pages before processing any commands
$singlePipeline = include FUNKPHP_DIR . '/pipeline/pipeline.php' ?? [
    'pipeline' =>
    [
        'request' =>
        [
            0 => 'pl_https_redirect',
            1 => 'pl_run_ini_sets',
            2 => 'pl_set_session_cookie_params',
            3 => 'pl_db_connect',
            4 => 'pl_headers_set',
            5 => 'pl_headers_remove',
            6 => 'pl_start_session',
            7 => 'pl_prepare_uri',
            8 => 'pl_match_denied_exact_ips',
            9 => 'pl_match_denied_methods',
            10 => 'pl_match_denied_uas',
            11 => 'pl_match_route',
            12 => 'pl_run_matched_route_middlewares',
            13 => 'pl_run_matched_route_handler',
            14 => 'pl_run_matched_data_handler',
        ],
        'post-request' => [],
    ],
    'no_match' =>
    [
        'handler' => [
            'json' =>
            [],
            'page' =>
            [],
        ],
        'page' => [
            'json' =>
            [],
            'page' =>
            [],
        ],
    ],
];
$singleRoutesRoute = include FUNKPHP_DIR . '/routes/routes.php' ?? [
    'ROUTES' => ['GET' => [], 'POST' => [], 'PUT' => [], 'DELETE' => [], 'PATCH' => []]
];
$tablesAndRelationshipsFile = include FUNKPHP_DIR . '/config/tables.php' ?? [
    'tables' => [],
    'relationships' => [],
    'mappings' => [],
];
$mysqlDataTypesFile = include FUNKPHP_DIR . '/config/valid/valid_mysql_datatypes.php' ?? [
    'STRINGS' => [],
    'NUMBERS' => [],
    'INTS' => [],
    'FLOATS' => [],
    'DATETIMES' => [],
    'BLOBS' => []
];
$mysqlOperatorSyntax = include FUNKPHP_DIR . '/config/valid/valid_mysql_operators.php' ?? [
    'arithmetic' => [
        '+' => [],
        '-' => [],
        '*' => [],
        '/' => [],
        '%' => [],
    ],
    'bitwise' => [
        '&' => [],
        '|' => [],
        '^' => [],
    ],
    'comparison' => [
        '=' => [],
        '!=' => [],
        '<>' => [],
        '>' => [],
        '>=' => [],
        '<' => [],
        '<=' => [],
        'IS' => [],
    ],
    'compound' => [
        '+=' => [],
        '-=' => [],
        '*=' => [],
        '/=' => [],
        '%=' => [],
        '&=' => [],
        '^-=' => [],
        '|*=' => [],
    ],
    'logical' => [
        'ALL' => [],
        'AND' => [],
        'ANY' => [],
        'BETWEEN' => [],
        'EXISTS' => [],
        'IN' => [],
        'LIKE' => [],
        'NOT' => [],
        'OR' => [],
        'SOME' => [],
    ],
];

if (!isset($command)) {
    cli_err_syntax_without_exit("FunkCLI - No command provided! Please provide a Command to execute.");
    if (JSON_MODE) {
        cli_info("Use the following JSON format: `{ \"command\": \"<command>\", \"arg1\": \"<arg1>\", \"arg2\": \"<arg2>\", \"arg3\": \"<arg3>\", \"arg4\": \"<arg4>\", \"arg5\": \"<arg5>\" }`");
    } else {
        cli_info("Type a Command and then up to 5 arguments, like this: `funk <command> <arg1> <arg2> <arg3> <arg4> <arg5>`");
    }
}

if (isset($command) && $command === 'compile') {
    cli_update_reserved_functions_list();
    cli_success("FunkCLI - Reserved Functions List Updated!");
}

// Compile only based on user input
// Compile all routes
// Define the command actions map
// $commands = [
//     'compile' => [
//         'r' & 'routes' recompiles the Troute & Single Route files!
//         'r' => function () {
//             Backup the old route file first (troute and single_routes)
//             cli_backup_batch(["troutes", "routes"]);

//             Then build and output new route file
//             cli_compile_batch(["troutes"]);
//             cli_success("Recompiling means any manually (not through FunkCLI) added middlewares or routing should work now!");
//         },
//         'routes' => function () {
//             Backup the old route file first (troute and single_routes)
//             cli_backup_batch(["troutes", "routes"]);

//             Then build and output new route file
//             cli_compile_batch(["troutes"]);
//             cli_success("Compiled Only Route routes!");
//         },
//         'v' & 'validation' recompiles matched Validation Handler File Function!
//         'v' => function () {
//             cli_compile_dx_validation_to_optimized_validation();
//         },
//         'validation' => function () {
//             cli_compile_dx_validation_to_optimized_validation();
//         },
//         's' & 'SQL' recompiles matched SQL Handler File Function!
//         's' => function () {
//             cli_compile_dx_sql_to_optimized_sql();
//         },
//         'sql' => function () {
//             cli_compile_dx_sql_to_optimized_sql();
//         },

//         'help' shows the help for the compile command
//         'help' => function () {
//             cli_info_multiline("FunkCLI - Compile Help");
//             cli_info_multiline("Usage: funkcli compile [all_routes|only_[route|page|data]]");
//             cli_info_multiline("The different values:");
//             cli_info_multiline("  all_routes - Compiles all routes");
//             cli_info_multiline("  only_route - Compiles only route routes");
//             cli_info_multiline("  only_page - Compiles only page routes");
//             cli_info_multiline("  only_data - Compiles only data routes");
//             cli_info_multiline("  These files end up in: funkphp/_internals/compiled/");
//             cli_info_multiline("***IMPORTANT 1*** This overwrites the current Troute Files!!!");
//             cli_info_multiline("***IMPORTANT 2*** Files are Backed Up in _funkphp/_BACKUPS/compiled/ & _BACKUPS/_FINAL_BACKUPS/!!!");
//             exit;
//         },
//         'reserved_list' recompiles the $$reserved_functions variable inside of the FunkCLI File!
//         'reserved_list' => function () {
//             cli_update_reserved_functions_list();
//         },
//     ],
//     'add' => [
//         Adding to ALL Routes at the same time (Route, Data, Page)
//         Adding Route to only Route Routes
//         'route' => function () {
//             cli_add_a_route();
//         },
//         'r' => function () {
//             cli_add_a_route();
//         },
//         'page' => function () {

//         },
//         'mw' => function () {
//             cli_add_a_middleware();
//         },
//         'middleware' => function () {
//             cli_add_a_middleware();
//         },
//         'table' => function () {
//             cli_parse_a_sql_table_file();
//         },
//     ],
//     'create' => [
//         'validation' => function () {
//             cli_create_validation_file_and_or_handler();
//         },
//         'v' => function () {
//             cli_create_validation_file_and_or_handler();
//         },
//         's' => function () {
//             cli_create_sql_file_and_or_handler();
//         },
//         'sql' => function () {
//             cli_create_sql_file_and_or_handler();
//         },
//     ],
//     'delete' => [
//         Delete a single route for /routes/ folder only
//         'route' => function () {
//             cli_delete_a_route();
//         },
//         'r' => function () {
//             cli_delete_a_route();
//         },
//         'v' => function () {
//             delete_handler_file_with_fn_or_just_fn_or_err_out("v", "PLACEHOLDER" ?? null);
//         },
//         'validation' => function () {
//             delete_handler_file_with_fn_or_just_fn_or_err_out("v", "PLACEHOLDER" ?? null);
//         },
//         's' => function () {
//             delete_handler_file_with_fn_or_just_fn_or_err_out("s", "PLACEHOLDER" ?? null);
//         },
//         'sql' => function () {
//             delete_handler_file_with_fn_or_just_fn_or_err_out("s", "PLACEHOLDER" ?? null);
//         },
//         'mw' => function () {
//             cli_delete_a_middleware();
//         },
//         'mw_file' => function () {
//             cli_delete_a_middleware_file();
//         },
//         'middleware_file' => function () {
//             cli_delete_a_middleware_file();
//         },
//         'middleware' => function () {
//             cli_delete_a_middleware();
//         },
//         'mw_from_all_routes' => function () {
//             cli_delete_a_middleware_from_all_routes();
//         },
//         'middleware_from_all_routes' => function () {
//             cli_delete_a_middleware_from_all_routes();
//         },
//     ],
// ];

// Catch-All for Non-Existing Commands
cli_err_syntax_without_exit("That FunkCLI Command doesn't exist! Enter `funk help` for More Information!");
if (JSON_MODE) {
    cli_info("Use the following JSON format: `{ \"command\": \"<command>\", \"arg1\": \"<arg1>\", \"arg2\": \"<arg2>\", \"arg3\": \"<arg3>\", \"arg4\": \"<arg4>\", \"arg5\": \"<arg5>\" }`");
} else {
    cli_info("Type a Valid Existing Command and then up to 5 arguments, like this: `funk <command> <arg1> <arg2> <arg3> <arg4> <arg5>`");
}
