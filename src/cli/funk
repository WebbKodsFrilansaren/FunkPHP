<?php // Define default directories and check whether CLI or
// in Web Browser mode (only JSON is allowed in Browser mode)
// After that we set the default values for command & arguments
define('PROJECT_DIR', dirname(__DIR__));
define('BACKUPS_DIR', PROJECT_DIR . '/backups');
define('BACKUPS_FINAL_DIR', BACKUPS_DIR . '/_final_backups');
define('BACKUPS_CACHED_DIR', BACKUPS_DIR . '/cached');
define('BACKUPS_CLI_DIR', BACKUPS_DIR . '/cli');
define('BACKUPS_CLI_COMMANDS_DIR', BACKUPS_CLI_DIR . '/commands');
define('BACKUPS_CLI_CONFIG_DIR', BACKUPS_CLI_DIR . '/config');
define('BACKUPS_COMPILED_DIR', BACKUPS_DIR . '/compiled');
define('BACKUPS_CONFIG_DIR', BACKUPS_DIR . '/config');
define('BACKUPS_MIDDLEWARES_DIR', BACKUPS_DIR . '/middlewares');
define('BACKUPS_PAGES_DIR', BACKUPS_DIR . '/pages');
define('BACKUPS_PAGES_COMPILED_DIR', BACKUPS_PAGES_DIR . '/compiled');
define('BACKUPS_PAGES_COMPONENTS_DIR', BACKUPS_PAGES_DIR . '/components');
define('BACKUPS_PAGES_LAYOUTS_DIR', BACKUPS_PAGES_DIR . '/layouts');
define('BACKUPS_PAGES_PARTIALS_DIR', BACKUPS_PAGES_DIR . '/partials');
define('BACKUPS_PIPELINE_DIR', BACKUPS_DIR . '/pipeline');
define('BACKUPS_ROUTES_DIR', BACKUPS_DIR . '/routes');
define('BACKUPS_SCHEMA_DIR', BACKUPS_DIR . '/schema');
define('BACKUPS_SNIPPETS_DIR', BACKUPS_DIR . '/snippets');
define('BACKUPS_SQL_DIR', BACKUPS_DIR . '/sql');
define('BACKUPS_TESTS_DIR', BACKUPS_DIR . '/tests');
define('BACKUPS_VALIDATION_DIR', BACKUPS_DIR . '/validation');
define('BATTERIES_DIR', PROJECT_DIR . '/batteries');
define('BATTERIES_MIDDLEWARES_DIR', BATTERIES_DIR . '/middlewares');
define('BATTERIES_PIPELINE_DIR', BATTERIES_DIR . '/pipeline');
define('BATTERIES_PIPELINE_REQUEST_DIR', BATTERIES_PIPELINE_DIR . '/request');
define('BATTERIES_PIPELINE_POST_RESPONSE_DIR', BATTERIES_PIPELINE_DIR . '/post-response');
define('CLI_DIR', __DIR__);
define('CLI_CORE_DIR', CLI_DIR . '/core');
define('CLI_COMMANDS_DIR', __DIR__ . '/commands');
define('CLI_CONFIG_DIR', __DIR__ . '/config');
define('FUNKPHP_DIR', PROJECT_DIR . '/funkphp');
define('FUNKPHP_INTERNALS_DIR', FUNKPHP_DIR . '/_internals');
define('FUNKPHP_INTERNALS_COMPILED_DIR', FUNKPHP_INTERNALS_DIR . '/compiled');
define('FUNKPHP_INTERNALS_FUNCTIONS_DIR', FUNKPHP_INTERNALS_DIR . '/functions');
define('FUNKPHP_CACHED_DIR', FUNKPHP_DIR . '/_cached');
define('FUNKPHP_CLASSES_DIR', FUNKPHP_DIR . '/classes');
define('FUNKPHP_CACHED_FILES_DIR', FUNKPHP_CACHED_DIR . '/files');
define('FUNKPHP_CACHED_JSON_DIR', FUNKPHP_CACHED_DIR . '/json');
define('FUNKPHP_CACHED_PAGES_DIR', FUNKPHP_CACHED_DIR . '/pages');
define('FUNKPHP_CONFIG_DIR', FUNKPHP_DIR . '/config');
define('FUNKPHP_CONFIG_BLOCKED_DIR', FUNKPHP_CONFIG_DIR . '/blocked');
define('FUNKPHP_CONFIG_VALID_DIR', FUNKPHP_CONFIG_DIR . '/valid');
define('FUNKPHP_MIDDLEWARES_DIR', FUNKPHP_DIR . '/middlewares');
define('FUNKPHP_PAGE_DIR', FUNKPHP_DIR . '/pages');
define('FUNKPHP_PAGE_COMPILED_DIR', FUNKPHP_PAGE_DIR . '/compiled');
define('FUNKPHP_PAGE_COMPONENTS_DIR', FUNKPHP_PAGE_DIR . '/components');
define('FUNKPHP_PAGE_PARTIALS_DIR', FUNKPHP_PAGE_DIR . '/partials');
define('FUNKPHP_PIPELINE_DIR', FUNKPHP_DIR . '/pipeline');
define('FUNKPHP_PIPELINE_REQUEST_DIR', FUNKPHP_PIPELINE_DIR . '/request');
define('FUNKPHP_PIPELINE_POST_RESPONSE_DIR', FUNKPHP_PIPELINE_DIR . '/post-response');
define('FUNKPHP_ROUTES_DIR', FUNKPHP_DIR . '/routes');
define('FUNKPHP_SQL_DIR', FUNKPHP_DIR . '/sql');
define('FUNKPHP_VALIDATION_DIR', FUNKPHP_DIR . '/validation');
define('GUI_DIR', PROJECT_DIR . '/gui');
define('PUBLIC_DIR', PROJECT_DIR . '/public_html');
define('SCHEMA_DIR', PROJECT_DIR . '/schema');
define('TEMPLATE_DIR', PROJECT_DIR . '/template');
define('TEST_DIR', PROJECT_DIR . '/test');

// Default exact file path used by FunkCLI
define("FUNKPHP_FILE_PATH_CLI_RESERVED", CLI_CORE_DIR . '/cli_reserved.php');
define("FUNKPHP_FILE_PATH_CLI_FUNS", CLI_CORE_DIR . '/cli_funs.php');
define("FUNKPHP_FILE_PATH_CLI_FUNS2", CLI_CORE_DIR . '/cli_funs2.php');
define("FUNKPHP_FILE_PATH_CLI_CONFIG_REGEX", CLI_CONFIG_DIR . '/regexes.php');
define("FUNKPHP_FILE_PATH_CLI_CONFIG_COMMANDS", CLI_CONFIG_DIR . '/commands.php');
define("FUNKPHP_FILE_PATH_CLI_CONFIG_EXTERNAL_CALLABLE_VALIDATORS", CLI_CONFIG_DIR . '/external_callable_validators.php');
define("FUNKPHP_FILE_PATH_TROUTES", FUNKPHP_INTERNALS_COMPILED_DIR . '/troute_route.php');
define("FUNKPHP_FILE_PATH_ROUTES", FUNKPHP_ROUTES_DIR . '/routes.php');
define("FUNKPHP_FILE_PATH_PIPELINE", FUNKPHP_PIPELINE_DIR . '/pipeline.php');
define("FUNKPHP_FILE_PATH_TABLES", FUNKPHP_CONFIG_DIR . '/tables.php');
define("FUNKPHP_FILE_PATH_DB_LOCAL", FUNKPHP_CONFIG_DIR . '/db.php');
define("FUNKPHP_FILE_PATH_SUPPORTED_MYSQL_DATA_TYPES", FUNKPHP_CONFIG_VALID_DIR . '/valid_mysql_datatypes.php');
define("FUNKPHP_FILE_PATH_SUPPORTED_MYSQL_OPERATORS", FUNKPHP_CONFIG_VALID_DIR . '/valid_mysql_operators.php');

// Define message types and ANSI colors for CLI output
// but that can also be parsed by returned JSON Response
define('MSG_TYPE_ERROR', 'ERROR');
define('MSG_TYPE_SUCCESS', 'SUCCESS');
define('MSG_TYPE_INFO', 'INFO');
define('MSG_TYPE_WARNING', 'WARNING');
define('MSG_TYPE_IMPORTANT', 'IMPORTANT');
define('MSG_TYPE_SYNTAX_ERROR', 'SYNTAX_ERROR');
define('ANSI_RED', "\033[31m");
define('ANSI_GREEN', "\033[32m");
define('ANSI_YELLOW', "\033[33m");
define('ANSI_BLUE', "\033[34m");
define('ANSI_RESET', "\033[0m");
global $funk_response_messages;
$funk_response_messages = [];

// Check /config/cli_regexes.php and /config/cli_commands.php files
// exist or error out, otherwise include them for later use
if (
    !is_readable(FUNKPHP_FILE_PATH_CLI_CONFIG_REGEX)
    || !is_readable(FUNKPHP_FILE_PATH_CLI_CONFIG_COMMANDS)
    || !is_readable(FUNKPHP_FILE_PATH_CLI_CONFIG_EXTERNAL_CALLABLE_VALIDATORS)
) {
    echo "\033[31m[FunkCLI - ERROR]: FunkPHP CLI Configuration File(s) - either `regexes.php`, `commands.php`, and/or `external_callable_validators.php`  - NOT FOUND in `src/cli/config` Directory. All 3 are REQUIRED by FunkCLI!\n\033[0m";
    exit;
}
$cliRegex = include_once FUNKPHP_FILE_PATH_CLI_CONFIG_REGEX ?? [];
$cliCommands = include_once FUNKPHP_FILE_PATH_CLI_CONFIG_COMMANDS ?? [];
if (!isset($cliCommands['aliases']) || !is_array($cliCommands['aliases'])) {
    echo "\033[31m[FunkCLI - ERROR]: FunkPHP CLI Configuration File `src/cli/config/commands.php` does NOT have the required `aliases` Key defined as an Array. This Key is REQUIRED by FunkCLI, leave it as an empty array if not used!\n\033[0m";
    exit;
}
// Store whether we are in JSON mode or CLI mode and the
// `command:optionalSubCommand` and its `arg1`,`arg2`...etc array!
$JSON = false;
$CLI = false;
$command = '';
$subCommand = '';
$args = [];

// CLI & JSON_MODE will validate that `command:optionalSubcommand` is provided!
// CLI MODE: REVISED VERSION
if (php_sapi_name() === 'cli') {
    // 1. Get all arguments from argv (skip the script name at index 0)
    // and verify that it actually exists
    $CLI = true;
    $rawArgs = $_SERVER['argv'] ?? null;
    if (!isset($rawArgs)) {
        echo "\033[31m[FunkCLI - ERROR]: FunkPHP CLI did not receive any arguments in `\$argv` Variable! Please check your Installation and/or File Permissions where the FunkCLI is deployed locally!\n\033[0m";
        exit;
    }
    // The command is always the first argument
    // and verify it is a non-empty string since
    // that is what the $command must be. After
    // that we lowercase it for consistency. We
    // also extract optional sub-command if it exists
    $command = $rawArgs[1] ?? null;
    if (
        !isset($command) || !is_string($command) || trim($command) === ''
        || !preg_match($cliRegex['commandRegex'], $command)
    ) {
        echo "\033[31m[FunkCLI - ERROR]: FunkPHP CLI did not receive a Valid Command:OptionalSubcommand as the First Argument: (`\$_SERVER['argv'][1]`). This means you MUST use the `php` before the `funk` as in:`php funk`. The Regex Syntax for `Command:OptionalSubcommand` is: `/^([a-zA-Z0-9_]+)(:[a-zA-Z_0-9]+)?$/i`. For example: `recompile` OR `new:r` where latter one has support for sub-commands.\n\033[0m";
        exit;
    }
    $command = strtolower($command);
    $subCommand = str_contains($command, ':') ? explode(':', $command, 2)[1] : '';
    $command = str_contains($command, ':') ? explode(':', $command, 2)[0] : $command;
    // The remaining arguments start from index 2
    $argLength = count($rawArgs);
    for ($i = 2; $i < $argLength; $i++) {
        $args[] = $rawArgs[$i];
    }
    // We iterate through all args and lowercase althose that are strings,
    // otherwise just continue since we allow also for more complex args
    foreach ($args as $index => $value) {
        if (is_string($value)) {
            // See if length is 0 after trimming whitespace and if so error out
            if (trim($value) === '') {
                echo "\033[31m[FunkCLI - ERROR]: FunkPHP CLI received an Empty Argument at Position " . ($index + 1) . "! Please provide Valid Non-Empty Arguments!\n\033[0m";
                exit;
            }
            $args[$index] = strtolower($value);
        }
    }
    // TESTING DEBUGGING RIGHT NOW - REMOVE LATER
    var_dump("\nCOMMAND:`" . $command . "`\nSUBBCOMMAND:`" . $subCommand . "`\nARGS:`" . print_r($args, true) . "`\n");
}
// JSON Mode: REVISED VERSION
else {
    $JSON = true;
    header('Content-Type: application/json');
    $payload = json_decode(file_get_contents('php://input'), true) ?? [];
    var_dump($payload);
    $command = $payload['command'] ?? null;
    // Verify $command is a non-empty string after trimming whitespace
    if (
        !isset($command) || !is_string($command)
        || trim($command) === ''
        || !preg_match($cliRegex['commandRegex'], $command)
    ) {
        http_response_code(400);
        echo json_encode(['error' => 'FunkPHP CLI (JSON Mode) did not receive a Valid Command expected in the `command` Key. The Regex Syntax for `Command:OptionalSubcommand` is: `/^([a-zA-Z0-9_]+)(:[a-zA-Z_0-9]+)?$/i`. For example: `{"command": "recompile"}` OR `{"command":"new:r"}` where latter one has support for sub-commands. Remember that in JSON Mode, the arguments in `{"arg1":<value1>,"arg2":<value2>,...}` can be of different data types, not just strings where applicable for a given command:optionalSubcommand. `{"command":"<command:optionalSubCommand>"}` must alwahys be a string though!']);
        exit;
    }  // Extract optionalSubCommand if it exists
    else {
        $command = strtolower($command);
        $subCommand = str_contains($command, ':') ? explode(':', $command, 2)[1] : '';
        $command = str_contains($command, ':') ? explode(':', $command, 2)[0] : $command;
    }
    // We now iterate through all (skipping 'command' key) and store those that has the key name
    // "arg1", "arg2" and so on. We also lowercase those that are strings afterwards! We store in $args
    foreach ($payload as $key => $value) {
        if (preg_match($cliRegex['argRegex'], $key)) {
            if (is_string($value)) {
                // See if length is 0 after trimming whitespace and if so error out
                if (trim($value) === '') {
                    http_response_code(400);
                    echo json_encode(['error' => 'FunkPHP CLI (JSON Mode) received an Empty Argument for Key `' . $key . '`! Please provide Valid Non-Empty Arguments. Remember that FunkCLI JSON Mode can support more data types than just Strings where applicable!']);
                    exit;
                }
                $args[] = strtolower($value);
            } else {
                $args[] = $value;
            }
        }
    }
}

define("JSON_MODE", $JSON);
define("CLI_MODE", $CLI);
define("NO_ARGS_CLI", ($CLI === true && count($args) === 0));

// If we are in JSON_MODE We then check that the REMOTE_ADDR is set and is either
// localhost or 127.0.0.1 since this should ONLY be ran in local development
if (JSON_MODE) {
    if (!isset($_SERVER['REMOTE_ADDR']) || !in_array($_SERVER['REMOTE_ADDR'], ['127.0.0.1', 'localhost'])) {
        http_response_code(403);
        echo json_encode(['error' => 'FunkCLI will ONLY accept using `127.0.0.1` or `localhost` as your Local IP!']);
        exit;
    }
    if (!isset($_SERVER['HTTP_ACCEPT']) || $_SERVER['HTTP_ACCEPT'] !== 'application/json') {
        http_response_code(406);
        echo json_encode(['error' => 'FunkCLI will ONLY accept `application/json` as value for the `Accept` Header!']);
        exit;
    }
}

// Try including files or throw an error if they are not found
if (
    !is_readable(FUNKPHP_FILE_PATH_CLI_FUNS)
    || !is_readable(FUNKPHP_FILE_PATH_CLI_FUNS2)
    || !is_readable(FUNKPHP_FILE_PATH_CLI_CONFIG_EXTERNAL_CALLABLE_VALIDATORS)
) {
    if (JSON_MODE) {
        http_response_code(500);
        echo json_encode([
            'type' => 'ERROR',
            'message' => 'FunkPHP CLI Function File(s) - either `cli_funs.php`, `cli_funs2.php` or both - NOT FOUND in `src/cli` Directory!'
        ]);
        exit;
    } else {
        echo "\033[31m[FunkCLI - ERROR]: FunkPHP CLI Function File(s) - either `cli_funs.php`, `cli_funs2.php` or both - NOT FOUND in `src/cli` Directory!\n\033[0m";
        exit;
    }
}
include_once FUNKPHP_FILE_PATH_CLI_FUNS;
include_once FUNKPHP_FILE_PATH_CLI_FUNS2;
include_once FUNKPHP_FILE_PATH_CLI_CONFIG_EXTERNAL_CALLABLE_VALIDATORS;

// Load the settings file if it exists, otherwise use default settings
$settings = include CLI_DIR . '/funksettings' ?? [
    // Default settings for FunkCLI. "ALWAYS_BACKUP_IN" is a list of all the backup settings for the CLI.
    // It is used to determine which files should be backed up when the CLI runs backup-related commands.
    // DO NOT DELETE THIS PART. IT IS REQUIRED FOR THE CLI TO WORK PROPERLY. Change values to true or false.
    // Default is to always backup everything except the actual data handler files and middleware files as of now.
    "ALWAYS_BACKUP_IN" =>
    [
        "COMPILED_IN_BACKUPS" => false,
        "COMPILED_IN_FINAL_BACKUPS" => false,
        "DATA_IN_BACKUPS" => false,
        "DATA_IN_FINAL_BACKUPS" => false,
        "DATA_HANDLERS_IN_BACKUPS" => false,
        "DATA_HANDLERS_IN_FINAL_BACKUPS" => false,
        "DATA_MWS_IN_BACKUPS" => false,
        "DATA_MWS_IN_FINAL_BACKUPS" => false,
        "PAGES_IN_BACKUPS" => false,
        "PAGES_IN_FINAL_BACKUPS" => false,
        "PAGES_HANDLERS_IN_BACKUPS" => false,
        "PAGES_HANDLERS_IN_FINAL_BACKUPS" => false,
        "PAGES_MWS_IN_BACKUPS" => false,
        "PAGES_MWS_IN_FINAL_BACKUPS" => false,
        "ROUTES_IN_BACKUPS" => false,
        "ROUTES_IN_FINAL_BACKUPS" => false,
        "ROUTES_HANDLERS_IN_BACKUPS" => false,
        "ROUTES_HANDLERS_IN_FINAL_BACKUPS" => false,
        "ROUTES_MWS_IN_BACKUPS" => false,
        "ROUTES_MWS_IN_FINAL_BACKUPS" => false,
        "ALLOW_COMPLETE_BACKUP_DELETION" => false,
    ],
];

// List of all functions that are reserved for the framework and
// should not be used in the application code. They are checked against
// when adding any new kind of function that is already reserved.
$reserved_functions = [];
if (is_readable(FUNKPHP_FILE_PATH_CLI_RESERVED)) {
    $reserved_functions = include_once FUNKPHP_FILE_PATH_CLI_RESERVED;
} else {
    cli_info_without_exit("Reserved Functions List File `cli_reserved.php` NOT FOUND! Attempting to generate a new one...");
    $reserved_functions = cli_update_reserved_functions_list_and_return_as_array();
    cli_success_without_exit("Reserved Functions List File `cli_reserved.php` Generated Successfully. Continuing...");
}
// First restore the folders if they don't exist
cli_restore_default_folders_and_files();

// Load current pipeline, routes, data and pages before processing any commands
$singlePipeline = include_once FUNKPHP_FILE_PATH_PIPELINE ?? [
    'pipeline' =>
    [
        'request' =>
        [
            0 => ['pl_https_redirect' => null],
            1 => ['pl_run_ini_sets' => null],
            2 => ['pl_set_session_cookie_params' => null],
            3 => ['pl_headers_set' => null],
            4 => ['pl_headers_remove' => null],
            5 => ['pl_start_session' => null],
            6 => ['pl_prepare_uri' => null],
            7 => ['pl_match_denied_exact_ips' => null],
            8 => ['pl_match_denied_methods' => null],
            9 => ['pl_match_denied_uas' => null],
            10 => ['pl_match_route' => [
                'no_match' => [
                    'json' => null,
                    'page' => '404',
                    'callback' => null
                ]
            ]],
            11 => ['pl_run_matched_route_middlewares' => 'defensive'],
            12 => ['pl_run_matched_route_keys' => 'defensive'],
        ],
        'post-response' => [
            0 => ['pl_debug' => null]
        ],
    ],
];
$singleRoutesRoute = include_once FUNKPHP_FILE_PATH_ROUTES ?? [
    'ROUTES' => ['GET' => [], 'POST' => [], 'PUT' => [], 'DELETE' => [], 'PATCH' => []]
];
$singleTroute = include_once FUNKPHP_FILE_PATH_TROUTES ?? [
    'GET' =>
    [],
    'POST' =>
    [],
    'PUT' =>
    [],
    'DELETE' =>
    [],
    'PATCH' =>
    [],
];
$tablesAndRelationshipsFile = include_once FUNKPHP_FILE_PATH_TABLES ?? [
    'tables' => [],
    'relationships' => [],
    'mappings' => [],
    'dependencies' => []
];
$mysqlDataTypesFile = include_once FUNKPHP_FILE_PATH_SUPPORTED_MYSQL_DATA_TYPES ?? [
    // Valid Keys that Table Columns can have in the `funkphp/config/tables.php` File
    "VALID_TABLE_COL_KEYS" => [
        'auto_increment',
        'default',
        'foreign_key',
        'joined_name',
        'nullable',
        'primary_key',
        'references',
        'references_column',
        'references_joined',
        'signed',
        'type',
        'unique',
        'unsigned',
        'value',
    ],
    // CATEGORIES OF DATA TYPES
    // String types
    "STRINGS" => [
        "CHAR" => 1,
        "VARCHAR" => 2,
        "BINARY" => 3,
        "VARBINARY" => 4,
        "TINYBLOB" => 5,
        "BLOB" => 6,
        "MEDIUMBLOB" => 7,
        "LONGBLOB" => 8,
        "TINYTEXT" => 9,
        "TEXT" => 10,
        "MEDIUMTEXT" => 11,
        "LONGTEXT" => 12,
        "NVARCHAR" => 13
    ],
    // Numeric types
    "NUMBERS" => [
        "TINYINT" => 1,
        "SMALLINT" => 2,
        "MEDIUMINT" => 3,
        "INT" => 4,
        "BIGINT" => 5,
        "FLOAT" => 6,
        "DOUBLE" => 7,
        "DECIMAL" => 8,
        "NUMERIC" => 9,
        "DOUBLE PRECISION" => 10,
        "BIT" => 11,
        "DEC" => 12,
        "BOOLEAN" => 13,
    ],
    "INTS" => [
        "TINYINT" => 1,
        "SMALLINT" => 2,
        "MEDIUMINT" => 3,
        "INT" => 4,
        "BIGINT" => 5,
        "SMALLSERIAL" => 6,
        "SERIAL" => 7,
        "BIGSERIAL" => 8,
    ],
    "FLOATS" => [
        "FLOAT" => 1,
        "DOUBLE" => 2,
        "DECIMAL" => 3,
        "DEC" => 4,
        "DOUBLE PRECISION" => 5,
        "NUMERIC" => 6,
        "REAL" => 7,
    ],
    // Date and time types
    "DATETIMES" => [
        "DATE" => 1,
        "TIME"  => 2,
        "DATETIME" => 3,
        "TIMESTAMP" => 4,
        "YEAR"  => 5,
    ],
    // Binary types
    "BLOBS" => [
        "TINYBLOB" => 1,
        "BLOB" => 2,
        "MEDIUMBLOB" => 3,
        "LONGBLOB" => 4
    ],
    // Text types
    "TEXTS" => [
        "TINYTEXT" => 1,
        "TEXT" => 2,
        "MEDIUMTEXT" => 3,
        "LONGTEXT" => 4
    ],
    // These data types cannot have any values assigned to them when
    // creating the table. For example "NVARCHAR" can have that to its
    // "value" key and also VARCHAR, but not "BLOB" or "TEXT" since they
    // already have fixed sizes. And also "ENUM" and "SET" types and all
    // integer and float types since they have max and min values, either
    // signed or unsigned.
    "INVALID_VALUES_FOR_NUMBER_TYPES" => [
        "TINYINT",
        "SMALLINT",
        "MEDIUMINT",
        "INT",
        "BIGINT",
        "FLOAT",
        "DOUBLE",
        "DECIMAL",
        "NUMERIC",
        "DOUBLE PRECISION",
        "BIT",
        "DEC",
        "BOOLEAN",
        "TINYBLOB",
        "BLOB",
        "MEDIUMBLOB",
        "LONGBLOB",
        "TINYTEXT",
        "TEXT",
        "MEDIUMTEXT",
        "LONGTEXT",
        "ENUM",
        "SET",
        "SERIAL",
        "BIGSERIAL",
        "SMALLSERIAL",
        "REAL",
        "DATE",
        "TIME",
        "DATETIME",
        "TIMESTAMP",
        "YEAR",
    ],
    ////////////////////////////////////////////////////////////////////
    // Each data type with its min and max values (including in unsigned
    // where applicable) and optionally the number of digits
    "BIGINT" => [
        "BINDING" => "i",
        "MIN_SIGNED" => -9223372036854775808,
        "MAX_SIGNED" => 9223372036854775807,
        "MIN_USIGNED" => 0,
        "MAX_UNSIGNED" => 18446744073709551615,
        "MIN_DIGITS" => 1,
        "MAX_DIGITS" => 20,
        "TYPE" => "integer",
        "CAN_BE_(UN)SIGNED" => true
    ],
    "BIGSERIAL" => [
        "BINDING" => "i",
        "MIN" => 1,
        "MAX" => 9223372036854775807,
        "MIN_DIGITS" => 1,
        "MAX_DIGITS" => 19,
        "TYPE" => "integer",
    ],
    "BINARY" => [
        "BINDING" => "b",
        "MIN" => null,
        "MAX" => null,
        "TYPE" => "blob"
    ],
    "BIT" => [
        "BINDING" => "i",
        "MIN" => 1,
        "MAX" => 64,
        "MIN_DIGITS" => 1,
        "MAX_DIGITS" => 1,
        "TYPE" => "integer"
    ],
    "BLOB" => [
        "BINDING" => "b",
        "MIN" => 0,
        "MAX" => 65535,
        "TYPE" => "blob"
    ],
    "BOOL" => [
        "BINDING" => "i",
        "MIN" => 0,
        "MAX" => 1,
        "MIN_DIGITS" => 1,
        "MAX_DIGITS" => 1,
        "TYPE" => "integer"
    ],
    "BOOLEAN" => [
        "BINDING" => "i",
        "MIN" => 0,
        "MAX" => 1,
        "MIN_DIGITS" => 1,
        "MAX_DIGITS" => 1,
        "TYPE" => "integer"
    ],
    "CHAR" => [
        "BINDING" => "s",
        "MIN" => 1,
        "MAX" => 255,
        "TYPE" => "string"
    ],
    "DATE" => [
        "BINDING" => "s",
        "MIN" => 10,
        "MAX" => 10,
        "MIN_DIGITS" => 8,
        "MAX_DIGITS" => 8,
        "TYPE" => "date"
    ],
    "DATETIME" => [
        "BINDING" => "s",
        "MIN" => 19,
        "MAX" => 19,
        "MIN_DIGITS" => 16,
        "MAX_DIGITS" => 16,
        "TYPE" => "datetime"
    ],
    "DEC" => [
        "BINDING" => "d",
        "MIN_SIZE" => 0,
        "MAX_SIZE" => 65,
        "MIN_D" => 0,
        "MAX_D" => 30,
        "MIN_DIGITS" => 3, // 1 plus dot plus 1
        "MAX_DIGITS" => 96, // 65 plus dot plus 30
        "TYPE" => "float"
    ],
    "DECIMAL" => [
        "BINDING" => "d",
        "MIN_SIZE" => 0,
        "MAX_SIZE" => 65,
        "MIN_D" => 0,
        "MAX_D" => 30,
        "MIN_DIGITS" => 3, // 1 plus dot plus 1
        "MAX_DIGITS" => 96, // 65 plus dot plus 30
        "TYPE" => "float"
    ],
    "DOUBLE PRECISION" => [
        "BINDING" => "d",
        "MIN_SIGNED" => -1.7976931348623157E+308,
        "MAX_SIGNED" => -2.2250738585072014E-308,
        "MIN_DIGITS" => 1,
        "MAX_DIGITS" => 15,
        "MIN_UNSIGNED" =>  2.2250738585072014E-308,
        "MAX_UNSIGNED" => 1.7976931348623157E+308,
        "TYPE" => "float",
        "CAN_BE_(UN)SIGNED" => true
    ],
    "DOUBLE" => [
        "BINDING" => "d",
        "MIN_SIGNED" => -1.7976931348623157E+308,
        "MAX_SIGNED" => -2.2250738585072014E-308,
        "MIN_DIGITS" => 1,
        "MAX_DIGITS" => 15,
        "MIN_UNSIGNED" =>  2.2250738585072014E-308,
        "MAX_UNSIGNED" => 1.7976931348623157E+308,
        "TYPE" => "float",
        "CAN_BE_(UN)SIGNED" => true
    ],
    "ENUM" => [
        "BINDING" => "s",
        "MIN" => null,
        "MAX" => null,
        "TYPE" => "string",
        "MIN_SIZE" => 0,
        "MAX_SIZE" => 65535,
    ],
    "FLOAT" => [
        "BINDING" => "d",
        "MIN_SIGNED" => -3.402823466E+38,
        "MAX_SIGNED" => -1.175494351E-38,
        "MIN_DIGITS" => 1,
        "MAX_DIGITS" => 7,
        "MIN_UNSIGNED" =>  1.175494351E-38,
        "MAX_UNSIGNED" => 3.402823466E+38,
        "TYPE" => "float",
        "CAN_BE_(UN)SIGNED" => true
    ],
    "INT" => [
        "BINDING" => "i",
        "MIN_SIGNED" => -2147483648,
        "MAX_SIGNED" => 2147483647,
        "MIN_DIGITS" => 1,
        "MAX_DIGITS" => 11,
        "MIN_UNSIGNED" => 0,
        "MAX_UNSIGNED" => 4294967295,
        "TYPE" => "integer",
        "CAN_BE_(UN)SIGNED" => true
    ],
    "INTEGER" => [
        "BINDING" => "i",
        "MIN_SIGNED" => -2147483648,
        "MAX_SIGNED" => 2147483647,
        "MIN_DIGITS" => 1,
        "MAX_DIGITS" => 11,
        "MIN_UNSIGNED" => 0,
        "MAX_UNSIGNED" => 4294967295,
        "TYPE" => "integer",
        "CAN_BE_(UN)SIGNED" => true
    ],
    "JSON" => [
        "BINDING" => "s",
        "MIN" => null,
        "MAX" => null,
        "MIN_SIZE" => 0,
        "MAX_SIZE" => 18446744073709551616,
        "TYPE" => "json"
    ],
    "LONGBLOB" => [
        "BINDING" => "b",
        "MIN" => 0,
        "MAX" => 4294967295,
        "TYPE" => "blob"
    ],
    "LONGTEXT" => [
        "BINDING" => "s",
        "MIN" => 1,
        "MAX" => 4294967295,
        "TYPE" => "string"
    ],
    "MEDIUMBLOB" => [
        "BINDING" => "b",
        "MIN" => 0,
        "MAX" => 16777215,
        "TYPE" => "blob"
    ],
    "MEDIUMINT" => [
        "BINDING" => "i",
        "MIN_SIGNED" => -8388608,
        "MAX_SIGNED" => 8388607,
        "MIN_UNSIGNED" => 0,
        "MAX_UNSIGNED" => 16777215,
        "MIN_DIGITS" => 1,
        "MAX_DIGITS" => 8,
        "TYPE" => "integer",
        "CAN_BE_(UN)SIGNED" => true
    ],
    "MEDIUMTEXT" => [
        "BINDING" => "s",
        "MIN" => 1,
        "MAX" => 16777215,
        "TYPE" => "string"
    ],
    "NVARCHAR" => [
        "BINDING" => "s",
        "MIN" => 1,
        "MAX" => 21845,
        "TYPE" => "string"
    ],
    "NUMERIC" => [
        "BINDING" => "d",
        "MIN_SIZE" => 0,
        "MAX_SIZE" => 65,
        "MIN_D" => 0,
        "MAX_D" => 30,
        "MIN_DIGITS" => 3, // 1 plus dot plus 1
        "MAX_DIGITS" => 96, // 65 plus dot plus 30
        "TYPE" => "float"
    ],
    "REAL" => [
        "BINDING" => "d",
        "MIN_SIGNED" => -3.402823466E+38,
        "MAX_SIGNED" => -1.175494351E-38,
        "MIN_DIGITS" => 3, // 1 plus dot plus 1
        "MAX_DIGITS" => 8, // 6 plus dot plus 1
        "MIN_UNSIGNED" =>  1.175494351E-38,
        "MAX_UNSIGNED" => 3.402823466E+38,
        "TYPE" => "float",
        "CAN_BE_(UN)SIGNED" => true
    ],
    "SERIAL" => [
        "BINDING" => "i",
        "MIN" => 1,
        "MAX" => 2147483647,
        "MIN_DIGITS" => 1,
        "MAX_DIGITS" => 10,
        "TYPE" => "integer",
    ],
    "SET" => [
        "BINDING" => "s",
        "MIN" => null,
        "MAX" => null,
        "MIN_SIZE" => 0,
        "MAX_SIZE" => 64,
        "TYPE" => "string"
    ],
    "SMALLINT" => [
        "BINDING" => "i",
        "MIN_SIGNED" => -32768,
        "MAX_SIGNED" => 32767,
        "MIN_DIGITS" => 1,
        "MAX_DIGITS" => 5,
        "MIN_UNSIGNED" => 0,
        "MAX_UNSIGNED" => 65535,
        "TYPE" => "integer",
        "CAN_BE_(UN)SIGNED" => true
    ],
    "SMALLSERIAL" => [
        "BINDING" => "i",
        "MIN" => 1,
        "MAX" => 32767,
        "MIN_DIGITS" => 1,
        "MAX_DIGITS" => 5,
        "TYPE" => "integer",
    ],
    "TEXT" => [
        "BINDING" => "s",
        "MIN" => 1,
        "MAX" => 65535,
        "TYPE" => "string"
    ],
    "TIME" => [
        "BINDING" => "s",
        "MIN" => 8,
        "MAX" => 8,
        "MIN_DIGITS" => 6,
        "MAX_DIGITS" => 6,
        "TYPE" => "time"
    ],
    "TIMESTAMP" => [
        "BINDING" => "s",
        "MIN" => 0,
        "MAX" => 2147483647,
        "MIN_DIGITS" => 1,
        "MAX_DIGITS" => 10,
        "TYPE" => "timestamp",
    ],
    "TINYBLOB" => [
        "BINDING" => "b",
        "MIN" => 0,
        "MAX" => 255,
        "TYPE" => "blob"
    ],
    "TINYINT" => [
        "BINDING" => "i",
        "MIN_SIGNED" => -128,
        "MAX_SIGNED" => 127,
        "MIN_DIGITS" => 1,
        "MAX_DIGITS" => 3,
        "MIN_UNSIGNED" => 0,
        "MAX_UNSIGNED" => 255,
        "TYPE" => "integer",
        "CAN_BE_(UN)SIGNED" => true
    ],
    "TINYTEXT" => [
        "BINDING" => "s",
        "MIN" => 1,
        "MAX" => 255,
        "TYPE" => "string"
    ],
    "VARBINARY" => [
        "BINDING" => "b",
        "MIN" => 0,
        "MAX" => 255,
        "TYPE" => "blob"
    ],
    "VARCHAR" => [
        "BINDING" => "s",
        "MIN" => 0,
        "MAX" => 65535,
        "TYPE" => "string"
    ],
    "YEAR" => [
        "BINDING" => "i",
        "MIN" => 4,
        "MAX" => 4,
        "MIN_DIGITS" => 4,
        "MAX_DIGITS" => 4,
        "TYPE" => "year"
    ],
];
$mysqlOperatorSyntax = include_once FUNKPHP_FILE_PATH_SUPPORTED_MYSQL_OPERATORS ?? [
    'arithmetic' => [
        '+' => [],
        '-' => [],
        '*' => [],
        '/' => [],
        '%' => [],
    ],
    'bitwise' => [
        '&' => [],
        '|' => [],
        '^' => [],
    ],
    'comparison' => [
        '=' => [],
        '!=' => [],
        '<>' => [],
        '>' => [],
        '>=' => [],
        '<' => [],
        '<=' => [],
        'IS' => [],
    ],
    'compound' => [
        '+=' => [],
        '-=' => [],
        '*=' => [],
        '/=' => [],
        '%=' => [],
        '&=' => [],
        '^-=' => [],
        '|*=' => [],
    ],
    'logical' => [
        'ALL' => [],
        'AND' => [],
        'ANY' => [],
        'BETWEEN' => [],
        'EXISTS' => [],
        'IN' => [],
        'LIKE' => [],
        'NOT' => [],
        'OR' => [],
        'SOME' => [],
    ],
];

// --------------------------------------------------------------------------------
// GLOBAL INTERACTIVE MODE GUARD & JSON Only Command Files Check!
// This prevents JSON mode from ever attempting a command with zero arguments.
// The other check is that $command that starts with "json" must then be called
// with 'Accept' Header set to 'application/json'. We also disallow the use "aliases"
// as a single command (no subcommand) no matter what mode since it is a reserved keywortd.
// --------------------------------------------------------------------------------
if (!$CLI && empty($args)) {
    cli_err('Interactive Mode is NOT supported with JSON Data! You must provide arguments using "arg1", "arg2", etc., keys in the JSON payload.');
}
if (str_starts_with($command, 'json')) {
    if (
        !isset($_SERVER['HTTP_ACCEPT'])
        || !is_string($_SERVER['HTTP_ACCEPT'])
        || str_contains($_SERVER['HTTP_ACCEPT'], 'application/json')
    ) {
        cli_err('Commands starting with "json" are ONLY supported in JSON Mode with `Accept: application/json` Header set and are meant to be used only by browsers/servers making JSON-based API Calls!');
    }
}
if ($command === 'aliases' && empty($subCommand)) {
    cli_err('The Command Name "aliases" is a Reserved Keyword in FunkCLI used for aliases for created commands in `src/cli/config/commands.php` (return [\'aliases\' => [...]]). You cannot use it as a Command without a Subcommand. It is also not allowed to delete that key but you can make it an empty array!');
}
// --------------------------------------------------------------------------------
// DYNAMIC COMMAND FILE LOADER - Loads based on "$command-$subCommand.php" where
// $subCommand is optional (the use of ":"). Commands are in `src/cli/commands`.
// But first we check if it exists as an alias in the `config/commands.php` file!
// --------------------------------------------------------------------------------
if (!empty($command) && empty($subCommand)) {
    if (isset($cliCommands['aliases'][$command])) {
        $fullAliasCommand = $cliCommands['aliases'][$command];
        if (str_contains($fullAliasCommand, ':')) {
            $command = explode(':', $fullAliasCommand, 2)[0];
            $subCommand = explode(':', $fullAliasCommand, 2)[1];
        } else {
            $command = $fullAliasCommand;
            $subCommand = '';
        }
    }
} else if (!empty($command) && !empty($subCommand)) {
    if (isset($cliCommands['aliases'][$command . ':' . $subCommand])) {
        $fullAliasCommand = $cliCommands['aliases'][$command . ':' . $subCommand];
        if (str_contains($fullAliasCommand, ':')) {
            $command = explode(':', $fullAliasCommand, 2)[0];
            $subCommand = explode(':', $fullAliasCommand, 2)[1];
        } else {
            $command = $fullAliasCommand;
            $subCommand = '';
        }
    }
}
//  `php funk $command:$subCommand`
if (is_readable(CLI_COMMANDS_DIR . '/' . $command . '-' . $subCommand . '.php')) {
    include CLI_COMMANDS_DIR . '/' . $command . '-' . $subCommand . '.php';
    exit;
}
// `php funk $command`
elseif (is_readable(CLI_COMMANDS_DIR . '/' . $command . '.php')) {
    include CLI_COMMANDS_DIR . '/' . $command . '.php';
    exit;
}
// Command file NOT found (or maybe typo), we handle this below - this is the "catch-all" case
else {
    cli_err_syntax_without_exit("Command File `$command" . (!empty($subCommand) ? ":$subCommand" : "") . "` not found or is using invalid syntax. Expected `command:optionalSubcommand` which starts up an interactive input session to get more details if needed OR `command:optionalSubcommand prefix1:param1 prefix2:param2 prefixetc:etc3` if you know all parameters upfront.");
    cli_info_without_exit("IMPORTANT: Interactive Input Session is NOT supported in JSON Mode! Also: File names should be using ONLY \":\" to separate command and subcommand, underscores `_` or any other kind of separator is NOT SUPPORTED in current version of FunkCLI in the FunkPHP Framework!");
    cli_info("Use the following JSON format: `{ \"command\": \"<command>:<first_param>\", \"arg1\": \"<arg1>\", \"arg2\": \"<arg2>\", \"arg3\": \"<arg3>\", \"arg4\": \"<arg4>\", \"arg5\": \"<arg5>\", \"arg6\": \"<arg6>\" }`");
}
cli_warning("This Warning should not be seen as it should have exit above. Please report the Bug to FunkPHP GitHub Issues at `https://github.com/WebbKodsFrilansaren/FunkPHP`!");
exit;
