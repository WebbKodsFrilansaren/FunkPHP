<?php // Define default directories and check whether CLI or
// in Web Browser mode (only JSON is allowed in Browser mode)
// After that we set the default values for command & arguments
define('PROJECT_DIR', dirname(__DIR__));
define('BACKUPS_DIR', PROJECT_DIR . '/backups');
define('BATTERIES_DIR', PROJECT_DIR . '/batteries');
define('BATTERIES_MIDDLEWARES_DIR', BATTERIES_DIR . '/middlewares');
define('BATTERIES_PIPELINE_DIR', BATTERIES_DIR . '/pipeline');
define('BATTERIES_PIPELINE_REQUEST_DIR', BATTERIES_PIPELINE_DIR . '/request');
define('BATTERIES_PIPELINE_POST_REQUEST_DIR', BATTERIES_PIPELINE_DIR . '/post-request');
define('CLI_DIR', __DIR__);
define('FUNKPHP_DIR', PROJECT_DIR . '/funkphp');
define('FUNKPHP_INTERNALS_DIR', FUNKPHP_DIR . '/_internals');
define('FUNKPHP_CACHED_DIR', FUNKPHP_DIR . '/_cached');
define('FUNKPHP_CACHED_FILES_DIR', FUNKPHP_CACHED_DIR . '/files');
define('FUNKPHP_CACHED_JSON_DIR', FUNKPHP_CACHED_DIR . '/json');
define('FUNKPHP_CACHED_PAGES_DIR', FUNKPHP_CACHED_DIR . '/pages');
define('FUNKPHP_CONFIG_DIR', FUNKPHP_DIR . '/config');
define('FUNKPHP_CONFIG_BLOCKED_DIR', FUNKPHP_CONFIG_DIR . '/blocked');
define('FUNKPHP_CONFIG_VALID_DIR', FUNKPHP_CONFIG_DIR . '/valid');
define('FUNKPHP_MIDDLEWARES_DIR', FUNKPHP_DIR . '/middlewares');
define('FUNKPHP_PAGE_DIR', FUNKPHP_DIR . '/page');
define('FUNKPHP_PAGE_COMPLETE_DIR', FUNKPHP_PAGE_DIR . '/complete');
define('FUNKPHP_PAGE_COMPONENTS_DIR', FUNKPHP_PAGE_DIR . '/components');
define('FUNKPHP_PAGE_PARTIALS_DIR', FUNKPHP_PAGE_DIR . '/partials');
define('FUNKPHP_PIPELINE_DIR', FUNKPHP_DIR . '/pipeline');
define('FUNKPHP_PIPELINE_REQUEST_DIR', FUNKPHP_PIPELINE_DIR . '/request');
define('FUNKPHP_PIPELINE_POST_REQUEST_DIR', FUNKPHP_PIPELINE_DIR . '/post-request');
define('FUNKPHP_ROUTES_DIR', FUNKPHP_DIR . '/routes');
define('FUNKPHP_SQL_DIR', FUNKPHP_DIR . '/sql');
define('FUNKPHP_VALIDATION_DIR', FUNKPHP_DIR . '/validation');
define('GUI_DIR', PROJECT_DIR . '/gui');
define('PUBLIC_DIR', PROJECT_DIR . '/public_html');
define('SCHEMA_DIR', PROJECT_DIR . '/schema');
define('TEMPLATE_DIR', PROJECT_DIR . '/template');
define('TEST_DIR', PROJECT_DIR . '/test');
$JSON = false;
$command = null;
$arg1 = null;
$arg2 = null;
$arg3 = null;
$arg4 = null;
$arg5 = null;

// Define message types and ANSI colors for CLI output
// but that can also be parsed by returned JSON Response
define('MSG_TYPE_ERROR', 'ERROR');
define('MSG_TYPE_SUCCESS', 'SUCCESS');
define('MSG_TYPE_INFO', 'INFO');
define('MSG_TYPE_WARNING', 'WARNING');
define('MSG_TYPE_IMPORTANT', 'IMPORTANT');
define('MSG_TYPE_SYNTAX_ERROR', 'SYNTAX_ERROR');
define('ANSI_RED', "\033[31m");
define('ANSI_GREEN', "\033[32m");
define('ANSI_YELLOW', "\033[33m");
define('ANSI_BLUE', "\033[34m");
define('ANSI_RESET', "\033[0m");
global $funk_response_messages;
$funk_response_messages = [];

// CLI Mode
if (php_sapi_name() === 'cli') {
    $command = $argv[1] ?? null;
    $arg1 = $argv[2] ?? null;
    $arg2 = $argv[3] ?? null;
    $arg3 = $argv[4] ?? null;
    $arg4 = $argv[5] ?? null;
    $arg5 = $argv[6] ?? null;
    $arg6 = $argv[7] ?? null;
}
// JSON Mode
else {
    $JSON = true;
    header('Content-Type: application/json');
    $payload = json_decode(file_get_contents('php://input'), true) ?? [];
    $command = $payload['command'] ?? null;
    $arg1 = $payload['arg1'] ?? null;
    $arg2 = $payload['arg2'] ?? null;
    $arg3 = $payload['arg3'] ?? null;
    $arg4 = $payload['arg4'] ?? null;
    $arg5 = $payload['arg5'] ?? null;
    $arg6 = $payload['arg6'] ?? null;
}
define("JSON_MODE", $JSON);
// If we are in JSON_MODE We then check that the REMOTE_ADDR is set and is either
// localhost or 127.0.0.1 since this should ONLY be ran in local development
if (JSON_MODE) {
    if (!isset($_SERVER['REMOTE_ADDR']) || !in_array($_SERVER['REMOTE_ADDR'], ['127.0.0.1', 'localhost'])) {
        http_response_code(403);
        echo json_encode(['error' => 'FunkCLI will ONLY accept using `127.0.0.1` or `localhost` as your Local IP!']);
        exit;
    }
    if (!isset($_SERVER['HTTP_ACCEPT']) || $_SERVER['HTTP_ACCEPT'] !== 'application/json') {
        http_response_code(406);
        echo json_encode(['error' => 'FunkCLI will ONLY accept `application/json` as value for the `Accept` Header!']);
        exit;
    }
}

// Try including files or throw an error if they are not found
if (
    !file_exists(CLI_DIR . '/cli_funs.php')
    || !file_exists(CLI_DIR . '/cli_funs2.php')
) {
    if (JSON_MODE) {
        http_response_code(500);
        echo json_encode([
            'type' => 'ERROR',
            'message' => 'FunkPHP CLI Function File(s) - either `cli_funs.php`, `cli_funs2.php` or both - NOT FOUND in `src/cli` Directory!'
        ]);
        exit;
    } else {
        echo "\033[31m[FunkCLI - ERROR]: FunkPHP CLI Function File(s) - either `cli_funs.php`, `cli_funs2.php` or both - NOT FOUND in `src/cli` Directory!\n\033[0m";
        exit;
    }
}
include CLI_DIR . '/cli_funs.php';
include CLI_DIR . '/cli_funs2.php';

// Load the settings file if it exists, otherwise use default settings
$settings = include CLI_DIR . '/funksettings' ?? [
    // Default settings for FunkCLI. "ALWAYS_BACKUP_IN" is a list of all the backup settings for the CLI.
    // It is used to determine which files should be backed up when the CLI runs backup-related commands.
    // DO NOT DELETE THIS PART. IT IS REQUIRED FOR THE CLI TO WORK PROPERLY. Change values to true or false.
    // Default is to always backup everything except the actual data handler files and middleware files as of now.
    "ALWAYS_BACKUP_IN" =>
    [
        "COMPILED_IN_BACKUPS" => false,
        "COMPILED_IN_FINAL_BACKUPS" => false,
        "DATA_IN_BACKUPS" => false,
        "DATA_IN_FINAL_BACKUPS" => false,
        "DATA_HANDLERS_IN_BACKUPS" => false,
        "DATA_HANDLERS_IN_FINAL_BACKUPS" => false,
        "DATA_MWS_IN_BACKUPS" => false,
        "DATA_MWS_IN_FINAL_BACKUPS" => false,
        "PAGES_IN_BACKUPS" => false,
        "PAGES_IN_FINAL_BACKUPS" => false,
        "PAGES_HANDLERS_IN_BACKUPS" => false,
        "PAGES_HANDLERS_IN_FINAL_BACKUPS" => false,
        "PAGES_MWS_IN_BACKUPS" => false,
        "PAGES_MWS_IN_FINAL_BACKUPS" => false,
        "ROUTES_IN_BACKUPS" => false,
        "ROUTES_IN_FINAL_BACKUPS" => false,
        "ROUTES_HANDLERS_IN_BACKUPS" => false,
        "ROUTES_HANDLERS_IN_FINAL_BACKUPS" => false,
        "ROUTES_MWS_IN_BACKUPS" => false,
        "ROUTES_MWS_IN_FINAL_BACKUPS" => false,
        "ALLOW_COMPLETE_BACKUP_DELETION" => false,
    ],
];

// All available dirs to use for the CLI
// & exact file paths to use for the CLI
$dirs = [
    "cli" => CLI_DIR . '/',
    "config" => FUNKPHP_DIR . '/config/',
    "config_blocked" => FUNKPHP_DIR . '/config/blocked/',
    "config_valid" => FUNKPHP_DIR . '/config/valid/',
    "_internals" => FUNKPHP_DIR . '/_internals/',
    "batteries" => FUNKPHP_DIR . '/_internals/batteries/',
    "compiled" => FUNKPHP_DIR . '/_internals/compiled/',
    "functions" => FUNKPHP_DIR . '/_internals/functions/',
    "_BACKUPS" => BACKUPS_DIR . '/',
    "pipeline" => FUNKPHP_DIR . '/pipeline/',
    "request" => FUNKPHP_DIR . '/pipeline/request/',
    "pipeline-request" => FUNKPHP_DIR . '/pipeline/request/',
    "post-request" => FUNKPHP_DIR . '/pipeline/post-request/',
    "pipeline-post-request" => FUNKPHP_DIR . '/pipeline/post-request/',
    "pipelines" => FUNKPHP_DIR . '/pipeline/',
    "routes" => FUNKPHP_DIR . '/routes/',
    "middlewares" => FUNKPHP_DIR . '/middlewares/',
    "pages" => FUNKPHP_DIR . '/page/',
    "p_parts" => FUNKPHP_DIR . '/pages/partials/',
    "p_components" => FUNKPHP_DIR . '/page/components/',
    "p_complete" => FUNKPHP_DIR . '/page/complete/',
    "templates" => PROJECT_DIR . '/template/',
    "tests" => PROJECT_DIR . '/test/',
    "schemas" => PROJECT_DIR . '/schema/',
    "sql" => FUNKPHP_DIR . '/sql/',
    'validations' => FUNKPHP_DIR . '/validation/',
    "backups_finals" => BACKUPS_DIR . '/_FINAL_BACKUPS/',
    "backups_compiled" => BACKUPS_DIR . '/compiled/',
    "backups_routes" => BACKUPS_DIR . '/config/',
    "backups_data" => BACKUPS_DIR . '/data/',
    "backups_pages" => BACKUPS_DIR . '/page/',
    "backups_handlers" => BACKUPS_DIR . '/handler/',
    "backups_middlewares" => BACKUPS_DIR . '/middlewares/',
    "backups_templates" => BACKUPS_DIR . '/template/',
    "backups_cached" => BACKUPS_DIR . '/cached/',
    "backups_config" => BACKUPS_DIR . '/config/',
    "backups_pipeline" => BACKUPS_DIR . '/pipeline/',
    "backups_sql" => BACKUPS_DIR . '/sql/',
    "backups_tests" => BACKUPS_DIR . '/test/',
    "backups_validations" => BACKUPS_DIR . '/validation/',
];
$exactFiles = [
    "troute_route" => $dirs['compiled'] . "troute_route.php",
    "single_pipeline" => $dirs['pipeline'] . "pipeline.php",
    "single_routes" => $dirs['routes'] . "routes.php",
    "tables" => $dirs['config'] . "tables.php",
    "db_local" => $dirs['config'] . "db_config.php",
    "supported_mysql_data_types" => $dirs['config_valid'] . "valid_mysql_datatypes.php",
];

// List of all functions that are reserved for the framework and
// should not be used in the application code. They are checked against
// when adding any new kind of function that is already reserved.
$reserved_functions = [];
if (file_exists_is_readable_writable(CLI_DIR . '/cli_reserved.php')) {
    $reserved_functions = include_once CLI_DIR . '/cli_reserved.php';
} else {
    cli_info_without_exit("Reserved Functions List File `cli_reserved.php` NOT FOUND! Attempting to generate a new one...");
    $reserved_functions = cli_update_reserved_functions_list_and_return_as_array();
    cli_success_without_exit("Reserved Functions List File `cli_reserved.php` Generated Successfully. Continuing...");
}
// First restore the folders if they don't exist
cli_restore_default_folders_and_files();

// Load current pipeline, routes, data and pages before processing any commands
$singlePipeline = include FUNKPHP_DIR . '/pipeline/pipeline.php' ?? [
    'pipeline' =>
    [
        'request' =>
        [
            0 => 'pl_https_redirect',
            1 => 'pl_run_ini_sets',
            2 => 'pl_set_session_cookie_params',
            3 => 'pl_db_connect',
            4 => 'pl_headers_set',
            5 => 'pl_headers_remove',
            6 => 'pl_start_session',
            7 => 'pl_prepare_uri',
            8 => 'pl_match_denied_exact_ips',
            9 => 'pl_match_denied_methods',
            10 => 'pl_match_denied_uas',
            11 => 'pl_match_route',
            12 => 'pl_run_matched_route_middlewares',
            13 => 'pl_run_matched_route_handler',
            14 => 'pl_run_matched_data_handler',
        ],
        'post-request' => [],
    ],
    'no_match' =>
    [
        'handler' => [
            'json' =>
            [],
            'page' =>
            [],
        ],
        'page' => [
            'json' =>
            [],
            'page' =>
            [],
        ],
    ],
];
$singleRoutesRoute = include FUNKPHP_DIR . '/routes/routes.php' ?? [
    'ROUTES' => ['GET' => [], 'POST' => [], 'PUT' => [], 'DELETE' => [], 'PATCH' => []]
];
$tablesAndRelationshipsFile = include FUNKPHP_DIR . '/config/tables.php' ?? [
    'tables' => [],
    'relationships' => [],
    'mappings' => [],
];
$mysqlDataTypesFile = include FUNKPHP_DIR . '/config/valid/valid_mysql_datatypes.php' ?? [
    'STRINGS' => [],
    'NUMBERS' => [],
    'INTS' => [],
    'FLOATS' => [],
    'DATETIMES' => [],
    'BLOBS' => []
];
$mysqlOperatorSyntax = include FUNKPHP_DIR . '/config/valid/valid_mysql_operators.php' ?? [
    'arithmetic' => [
        '+' => [],
        '-' => [],
        '*' => [],
        '/' => [],
        '%' => [],
    ],
    'bitwise' => [
        '&' => [],
        '|' => [],
        '^' => [],
    ],
    'comparison' => [
        '=' => [],
        '!=' => [],
        '<>' => [],
        '>' => [],
        '>=' => [],
        '<' => [],
        '<=' => [],
        'IS' => [],
    ],
    'compound' => [
        '+=' => [],
        '-=' => [],
        '*=' => [],
        '/=' => [],
        '%=' => [],
        '&=' => [],
        '^-=' => [],
        '|*=' => [],
    ],
    'logical' => [
        'ALL' => [],
        'AND' => [],
        'ANY' => [],
        'BETWEEN' => [],
        'EXISTS' => [],
        'IN' => [],
        'LIKE' => [],
        'NOT' => [],
        'OR' => [],
        'SOME' => [],
    ],
];

if (!isset($command)) {
    cli_err_syntax_without_exit("FunkCLI - No command provided! Please provide a Command to execute with up to 6 arguments!");
    if (JSON_MODE) {
        cli_info("Use the following JSON format: `{ \"command\": \"<command>:<first_param>\", \"arg1\": \"<arg1>\", \"arg2\": \"<arg2>\", \"arg3\": \"<arg3>\", \"arg4\": \"<arg4>\", \"arg5\": \"<arg5>\", \"arg6\": \"<arg6>\" }`");
    } else {
        cli_info("Type a Command and then up to 6 arguments, like this: `funk <command:first_param> <arg1> <arg2> <arg3> <arg4> <arg5> <arg6>`");
    }
}
if (!is_string($command) || empty($command)) {
    cli_err_syntax_without_exit("FunkCLI - Command must be a Non-Empty String! Please provide a valid Command with up to 6 arguments!");
    if (JSON_MODE) {
        cli_info("Use the following JSON format: `{ \"command\": \"<command>:<first_param>\", \"arg1\": \"<arg1>\", \"arg2\": \"<arg2>\", \"arg3\": \"<arg3>\", \"arg4\": \"<arg4>\", \"arg5\": \"<arg5>\" }`");
    } else {
        cli_info("Type a Command and then up to 6 arguments, like this: `funk <command:first_param> <arg1> <arg2> <arg3> <arg4> <arg5> <arg6>`");
    }
}

//------ Entry point for the CLI commands where one of the commands are "make:" that is ------
// used to CREATE Function Files (either single anonymous ones or files with named functions).
// Begin by getting a valid command structure by "command:first_param"
// and split it into parts that can then be used to determine next step
$cmd = '';
$firstParam = '';
if (!preg_match('/([a-z]+):([a-z0-9_-]+)/i', $command, $matches)) {
    cli_err_syntax("FunkCLI - Invalid command format! Please use the format `command:first_param` with up to 6 arguments!");
    if (JSON_MODE) {
        cli_info("Use the following JSON format: `{ \"command\": \"<command>:<first_param>\", \"arg1\": \"<arg1>\", \"arg2\": \"<arg2>\", \"arg3\": \"<arg3>\", \"arg4\": \"<arg4>\", \"arg5\": \"<arg5>\", \"arg6\": \"<arg6>\" }`");
    } else {
        cli_info("Type a Command and then up to 6 arguments, like this: `funk <command:first_param> <arg1> <arg2> <arg3> <arg4> <arg5> <arg6>`");
    }
} else {
    $cmd = $matches[1] ?? null;
    $firstParam = $matches[2] ?? null;
}

// Safety-check again for $cmd and $firstParam which should be non-empty strings
if (!isset($cmd) || !is_string($cmd) || empty($cmd)) {
    cli_err_syntax_without_exit("FunkCLI - Command must be a Non-Empty String! Please provide a valid Command with up to 6 arguments!");
    if (JSON_MODE) {
        cli_info("Use the following JSON format: `{ \"command\": \"<command>:<first_param>\", \"arg1\": \"<arg1>\", \"arg2\": \"<arg2>\", \"arg3\": \"<arg3>\", \"arg4\": \"<arg4>\", \"arg5\": \"<arg5>\", \"arg6\": \"<arg6>\" }`");
    } else {
        cli_info("Type a Command and then up to 6 arguments, like this: `funk <command:first_param> <arg1> <arg2> <arg3> <arg4> <arg5> <arg6>`");
    }
}
if (!isset($firstParam) || !is_string($firstParam) || empty($firstParam)) {
    cli_err_syntax_without_exit("FunkCLI - First Parameter must be a Non-Empty String! Please provide a valid First Parameter.");
    if (JSON_MODE) {
        cli_info("Use the following JSON format: `{ \"command\": \"<command>:<first_param>\", \"arg1\": \"<arg1>\", \"arg2\": \"<arg2>\", \"arg3\": \"<arg3>\", \"arg4\": \"<arg4>\", \"arg5\": \"<arg5>\", \"arg6\": \"<arg6>\" }`");
    } else {
        cli_info("Type a Command and then up to 6 arguments, like this: `funk <command:first_param> <arg1> <arg2> <arg3> <arg4> <arg5> <arg6>`");
    }
}

// MAKE: Create something new WITHOUT adding it to a specific Method/Route
if ($cmd === "make") {
    $singleAnonymousFunctionlist = ["middlewares", "pipeline"];
}
// ADD: Attach something that already exists to a specific Method/Route
elseif ($cmd === "add") {
}
// REMOVE: Remove an added Route_Key from a specific Method/Route
// found in "/funkphp/routes" OR in "/funkphp/middlewares".
elseif ($cmd === "remove") {
}
// DELETE: Delete something that exists which is either a Function File,
// or a Specific Function from a Specific File. NEVER deletes Method/Route!
elseif ($cmd === "delete") {
}
// COMPILE: Compiles a Validation OR SQL File by using its $DX variable
// and (re)genereating a new return (); in the same Validation/SQL File.
elseif ($cmd === "compile") {
}
// Catch any invalid commands that are not recognized
else {
    cli_err_syntax_without_exit("FunkCLI - Invalid command! Please provide a valid command with up to 6 arguments!");
    if (JSON_MODE) {
        cli_info("Use the following JSON format: `{ \"command\": \"<command>:<first_param>\", \"arg1\": \"<arg1>\", \"arg2\": \"<arg2>\", \"arg3\": \"<arg3>\", \"arg4\": \"<arg4>\", \"arg5\": \"<arg5>\", \"arg6\": \"<arg6>\" }`");
    } else {
        cli_info("Type a Command and then up to 6 arguments, like this: `funk <command:first_param> <arg1> <arg2> <arg3> <arg4> <arg5> <arg6>`");
    }
}
