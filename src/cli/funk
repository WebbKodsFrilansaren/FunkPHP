<?php // Define default directories and check whether CLI or
// in Web Browser mode (only JSON is allowed in Browser mode)
// After that we set the default values for command & arguments
define('PROJECT_DIR', dirname(__DIR__));
define('BACKUPS_DIR', PROJECT_DIR . '/backups');
define('BATTERIES_DIR', PROJECT_DIR . '/batteries');
define('BATTERIES_MIDDLEWARES_DIR', BATTERIES_DIR . '/middlewares');
define('BATTERIES_PIPELINE_DIR', BATTERIES_DIR . '/pipeline');
define('BATTERIES_PIPELINE_REQUEST_DIR', BATTERIES_PIPELINE_DIR . '/request');
define('BATTERIES_PIPELINE_POST_RESPONSE_DIR', BATTERIES_PIPELINE_DIR . '/post-response');
define('CLI_DIR', __DIR__);
define('CLI_COMMANDS_DIR', __DIR__ . '/commands');
define('CLI_CONFIG_DIR', __DIR__ . '/config');
define('FUNKPHP_DIR', PROJECT_DIR . '/funkphp');
define('FUNKPHP_INTERNALS_DIR', FUNKPHP_DIR . '/_internals');
define('FUNKPHP_INTERNALS_COMPILED_DIR', FUNKPHP_INTERNALS_DIR . '/compiled');
define('FUNKPHP_CACHED_DIR', FUNKPHP_DIR . '/_cached');
define('FUNKPHP_CLASSES_DIR', FUNKPHP_DIR . '/classes');
define('FUNKPHP_CACHED_FILES_DIR', FUNKPHP_CACHED_DIR . '/files');
define('FUNKPHP_CACHED_JSON_DIR', FUNKPHP_CACHED_DIR . '/json');
define('FUNKPHP_CACHED_PAGES_DIR', FUNKPHP_CACHED_DIR . '/pages');
define('FUNKPHP_CONFIG_DIR', FUNKPHP_DIR . '/config');
define('FUNKPHP_CONFIG_BLOCKED_DIR', FUNKPHP_CONFIG_DIR . '/blocked');
define('FUNKPHP_CONFIG_VALID_DIR', FUNKPHP_CONFIG_DIR . '/valid');
define('FUNKPHP_MIDDLEWARES_DIR', FUNKPHP_DIR . '/middlewares');
define('FUNKPHP_PAGE_DIR', FUNKPHP_DIR . '/pages');
define('FUNKPHP_PAGE_COMPILED_DIR', FUNKPHP_PAGE_DIR . '/compiled');
define('FUNKPHP_PAGE_COMPONENTS_DIR', FUNKPHP_PAGE_DIR . '/components');
define('FUNKPHP_PAGE_PARTIALS_DIR', FUNKPHP_PAGE_DIR . '/partials');
define('FUNKPHP_PIPELINE_DIR', FUNKPHP_DIR . '/pipeline');
define('FUNKPHP_PIPELINE_REQUEST_DIR', FUNKPHP_PIPELINE_DIR . '/request');
define('FUNKPHP_PIPELINE_POST_RESPONSE_DIR', FUNKPHP_PIPELINE_DIR . '/post-response');
define('FUNKPHP_ROUTES_DIR', FUNKPHP_DIR . '/routes');
define('FUNKPHP_SQL_DIR', FUNKPHP_DIR . '/sql');
define('FUNKPHP_VALIDATION_DIR', FUNKPHP_DIR . '/validation');
define('GUI_DIR', PROJECT_DIR . '/gui');
define('PUBLIC_DIR', PROJECT_DIR . '/public_html');
define('SCHEMA_DIR', PROJECT_DIR . '/schema');
define('TEMPLATE_DIR', PROJECT_DIR . '/template');
define('TEST_DIR', PROJECT_DIR . '/test');

// Define message types and ANSI colors for CLI output
// but that can also be parsed by returned JSON Response
define('MSG_TYPE_ERROR', 'ERROR');
define('MSG_TYPE_SUCCESS', 'SUCCESS');
define('MSG_TYPE_INFO', 'INFO');
define('MSG_TYPE_WARNING', 'WARNING');
define('MSG_TYPE_IMPORTANT', 'IMPORTANT');
define('MSG_TYPE_SYNTAX_ERROR', 'SYNTAX_ERROR');
define('ANSI_RED', "\033[31m");
define('ANSI_GREEN', "\033[32m");
define('ANSI_YELLOW', "\033[33m");
define('ANSI_BLUE', "\033[34m");
define('ANSI_RESET', "\033[0m");
global $funk_response_messages;
$funk_response_messages = [];

// Define used Regexes in an array
$cliRegex = include_once CLI_DIR . '/config/regexes.php' ?? [];

// Map different aliases (different $subCommand for the same $command
// and other info that some src/cli/commands-Files. Extend as needed!
$commandConfigMappings = [
    // Configure your own CLI Commands in the `src/cli/commands.php` file
    // after you have created a Command File that oyu put in `src/cli/commands/`
    'commands' => include_once CLI_DIR . '/config/commands.php' ?? [],
    // Any string in this array will cause a non-stopping warning!
    'folder_list_that_warns' => [
        'routes',
        'cached',
        'classes',
        'backups',
        '_final_backups',
        'valid',
        'complete',
        'functions',
        'compiled',
        'components',
        'partials',
        'blocked',
        'config',
        '_internals',
        'batteries',
        'funkeries',
        'post-response',
        'request',
        'gui',
        'public_html',
        'cli',
        'test',
        'tests',
        'schema',
        'schemas',
    ],
    // Config for matched $subCommand based on matched `aliasesMap` above
    'config' => [
        // config for m/mw/middleware aliases
        'middleware' => [
            'aliases' => ['m', 'mw', 'middleware'],
            'folder' => 'funkphp/middlewares',
            'type' => 'middlewares',
            'file_prefix' => 'm_',
            'anonymous' => true,
            'route_key' => ['middlewares' => null],
        ],
        // config for pl/pipeline aliases
        'pipeline' => [
            'aliases' => ['pl', 'pipeline'],
            'folder' => 'funkphp/pipeline',
            'type' => 'pipeline',
            'file_prefix' => 'pl_',
            'anonymous' => true,
        ],
        // config for v/validation aliases
        'validation' => [
            'aliases' => ['v', 'validation'],
            'folder' => 'funkphp/validation',
            'type' => 'validation',
            'file_prefix' => 'v_',
            'tables_required_validation' => true, // Use boolean flags for special logic
        ],
        // config for s/sql aliases
        'sql' => [
            'aliases' => ['s', 'sql'],
            'folder' => 'funkphp/sql',
            'type' => 'sql',
            'file_prefix' => 's_',
            'tables_required_sql' => true,
        ],
        // config for r/route/rutt aliases (only creating routes, no Route_Keys)
        'route' => [
            'aliases' => ['r', 'rutt', 'route'],
        ],
        // config for h/handler aliases (folder=>file=>fn creation)
        'handler' => [
            'aliases' => ['h', 'handler'],
        ]
    ],
    // Add other command types here...
];

// Store whether we are in JSON mode or CLI mode and the
// `command:optionalSubCommand` and its `arg1`,`arg2`...etc array!
$JSON = false;
$CLI = false;
$command = '';
$subCommand = '';
$args = [];

// CLI & JSON_MODE will validate that `command:optionalSubcommand` is provided!
// CLI MODE: REVISED VERSION
if (php_sapi_name() === 'cli') {
    // 1. Get all arguments from argv (skip the script name at index 0)
    // and verify that it actually exists
    $CLI = true;
    $rawArgs = $_SERVER['argv'] ?? null;
    if (!isset($rawArgs)) {
        echo "\033[31m[FunkCLI - ERROR]: FunkPHP CLI did not receive any arguments in `\$argv` Variable! Please check your Installation and/or File Permissions where the FunkCLI is deployed locally!\n\033[0m";
        exit;
    }
    // The command is always the first argument
    // and verify it is a non-empty string since
    // that is what the $command must be. After
    // that we lowercase it for consistency. We
    // also extract optional sub-command if it exists
    $command = $rawArgs[1] ?? null;
    if (
        !isset($command) || !is_string($command) || trim($command) === ''
        || !preg_match($cliRegex['commandRegex'], $command)
    ) {
        echo "\033[31m[FunkCLI - ERROR]: FunkPHP CLI did not receive a Valid Command:OptionalSubcommand as the First Argument: (`\$_SERVER['argv'][1]`). This means you MUST use the `php` before the `funk` as in:`php funk`. The Regex Syntax for `Command:OptionalSubcommand` is: `/^([a-zA-Z0-9_]+)(:[a-zA-Z_0-9]+)?$/i`. For example: `recompile` OR `new:r` where latter one has support for sub-commands.\n\033[0m";
        exit;
    }
    $command = strtolower($command);
    $subCommand = str_contains($command, ':') ? explode(':', $command, 2)[1] : '';
    $command = str_contains($command, ':') ? explode(':', $command, 2)[0] : $command;
    // The remaining arguments start from index 2
    $argLength = count($rawArgs);
    for ($i = 2; $i < $argLength; $i++) {
        $args[] = $rawArgs[$i];
    }
    // We iterate through all args and lowercase althose that are strings,
    // otherwise just continue since we allow also for more complex args
    foreach ($args as $index => $value) {
        if (is_string($value)) {
            // See if length is 0 after trimming whitespace and if so error out
            if (trim($value) === '') {
                echo "\033[31m[FunkCLI - ERROR]: FunkPHP CLI received an Empty Argument at Position " . ($index + 1) . "! Please provide Valid Non-Empty Arguments!\n\033[0m";
                exit;
            }
            $args[$index] = strtolower($value);
        }
    }
    // TESTING DEBUGGING RIGHT NOW - REMOVE LATER
    var_dump("\nCOMMAND:`" . $command . "`\nSUBBCOMMAND:`" . $subCommand . "`\nARGS:`" . print_r($args, true) . "`\n");
}
// JSON Mode: REVISED VERSION
else {
    $JSON = true;
    header('Content-Type: application/json');
    $payload = json_decode(file_get_contents('php://input'), true) ?? [];
    var_dump($payload);
    $command = $payload['command'] ?? null;
    // Verify $command is a non-empty string after trimming whitespace
    if (
        !isset($command) || !is_string($command)
        || trim($command) === ''
        || !preg_match($cliRegex['commandRegex'], $command)
    ) {
        http_response_code(400);
        echo json_encode(['error' => 'FunkPHP CLI (JSON Mode) did not receive a Valid Command expected in the `command` Key. The Regex Syntax for `Command:OptionalSubcommand` is: `/^([a-zA-Z0-9_]+)(:[a-zA-Z_0-9]+)?$/i`. For example: `{"command": "recompile"}` OR `{"command":"new:r"}` where latter one has support for sub-commands. Remember that in JSON Mode, the arguments in `{"arg1":<value1>,"arg2":<value2>,...}` can be of different data types, not just strings where applicable for a given command:optionalSubcommand. `{"command":"<command:optionalSubCommand>"}` must alwahys be a string though!']);
        exit;
    }  // Extract optionalSubCommand if it exists
    else {
        $command = strtolower($command);
        $subCommand = str_contains($command, ':') ? explode(':', $command, 2)[1] : '';
        $command = str_contains($command, ':') ? explode(':', $command, 2)[0] : $command;
    }
    // We now iterate through all (skipping 'command' key) and store those that has the key name
    // "arg1", "arg2" and so on. We also lowercase those that are strings afterwards! We store in $args
    foreach ($payload as $key => $value) {
        if (preg_match($cliRegex['argRegex'], $key)) {
            if (is_string($value)) {
                // See if length is 0 after trimming whitespace and if so error out
                if (trim($value) === '') {
                    http_response_code(400);
                    echo json_encode(['error' => 'FunkPHP CLI (JSON Mode) received an Empty Argument for Key `' . $key . '`! Please provide Valid Non-Empty Arguments. Remember that FunkCLI JSON Mode can support more data types than just Strings where applicable!']);
                    exit;
                }
                $args[] = strtolower($value);
            } else {
                $args[] = $value;
            }
        }
    }
}

define("JSON_MODE", $JSON);
define("CLI_MODE", $CLI);
define("NO_ARGS_CLI", ($CLI === true && count($args) === 0));

// If we are in JSON_MODE We then check that the REMOTE_ADDR is set and is either
// localhost or 127.0.0.1 since this should ONLY be ran in local development
if (JSON_MODE) {
    if (!isset($_SERVER['REMOTE_ADDR']) || !in_array($_SERVER['REMOTE_ADDR'], ['127.0.0.1', 'localhost'])) {
        http_response_code(403);
        echo json_encode(['error' => 'FunkCLI will ONLY accept using `127.0.0.1` or `localhost` as your Local IP!']);
        exit;
    }
    if (!isset($_SERVER['HTTP_ACCEPT']) || $_SERVER['HTTP_ACCEPT'] !== 'application/json') {
        http_response_code(406);
        echo json_encode(['error' => 'FunkCLI will ONLY accept `application/json` as value for the `Accept` Header!']);
        exit;
    }
}

// Try including files or throw an error if they are not found
if (
    !is_readable(CLI_DIR . '/cli_funs.php')
    || !is_readable(CLI_DIR . '/cli_funs2.php')
    || !is_readable(CLI_CONFIG_DIR . '/external_callable_validators.php')
) {
    if (JSON_MODE) {
        http_response_code(500);
        echo json_encode([
            'type' => 'ERROR',
            'message' => 'FunkPHP CLI Function File(s) - either `cli_funs.php`, `cli_funs2.php` or both - NOT FOUND in `src/cli` Directory!'
        ]);
        exit;
    } else {
        echo "\033[31m[FunkCLI - ERROR]: FunkPHP CLI Function File(s) - either `cli_funs.php`, `cli_funs2.php` or both - NOT FOUND in `src/cli` Directory!\n\033[0m";
        exit;
    }
}
include_once CLI_DIR . '/cli_funs.php';
include_once CLI_DIR . '/cli_funs2.php';
include_once CLI_CONFIG_DIR . '/external_callable_validators.php';

// Load the settings file if it exists, otherwise use default settings
$settings = include CLI_DIR . '/funksettings' ?? [
    // Default settings for FunkCLI. "ALWAYS_BACKUP_IN" is a list of all the backup settings for the CLI.
    // It is used to determine which files should be backed up when the CLI runs backup-related commands.
    // DO NOT DELETE THIS PART. IT IS REQUIRED FOR THE CLI TO WORK PROPERLY. Change values to true or false.
    // Default is to always backup everything except the actual data handler files and middleware files as of now.
    "ALWAYS_BACKUP_IN" =>
    [
        "COMPILED_IN_BACKUPS" => false,
        "COMPILED_IN_FINAL_BACKUPS" => false,
        "DATA_IN_BACKUPS" => false,
        "DATA_IN_FINAL_BACKUPS" => false,
        "DATA_HANDLERS_IN_BACKUPS" => false,
        "DATA_HANDLERS_IN_FINAL_BACKUPS" => false,
        "DATA_MWS_IN_BACKUPS" => false,
        "DATA_MWS_IN_FINAL_BACKUPS" => false,
        "PAGES_IN_BACKUPS" => false,
        "PAGES_IN_FINAL_BACKUPS" => false,
        "PAGES_HANDLERS_IN_BACKUPS" => false,
        "PAGES_HANDLERS_IN_FINAL_BACKUPS" => false,
        "PAGES_MWS_IN_BACKUPS" => false,
        "PAGES_MWS_IN_FINAL_BACKUPS" => false,
        "ROUTES_IN_BACKUPS" => false,
        "ROUTES_IN_FINAL_BACKUPS" => false,
        "ROUTES_HANDLERS_IN_BACKUPS" => false,
        "ROUTES_HANDLERS_IN_FINAL_BACKUPS" => false,
        "ROUTES_MWS_IN_BACKUPS" => false,
        "ROUTES_MWS_IN_FINAL_BACKUPS" => false,
        "ALLOW_COMPLETE_BACKUP_DELETION" => false,
    ],
];

// All available dirs to use for the CLI
// & exact file paths to use for the CLI
$dirs = [
    "cli" => CLI_DIR . '/',
    "config" => FUNKPHP_DIR . '/config/',
    "config_blocked" => FUNKPHP_DIR . '/config/blocked/',
    "config_valid" => FUNKPHP_DIR . '/config/valid/',
    "_internals" => FUNKPHP_DIR . '/_internals/',
    "batteries" => FUNKPHP_DIR . '/_internals/batteries/',
    "compiled" => FUNKPHP_DIR . '/_internals/compiled/',
    "functions" => FUNKPHP_DIR . '/_internals/functions/',
    "_BACKUPS" => BACKUPS_DIR . '/',
    "pipeline" => FUNKPHP_DIR . '/pipeline/',
    "request" => FUNKPHP_DIR . '/pipeline/request/',
    "pipeline-request" => FUNKPHP_DIR . '/pipeline/request/',
    "post-response" => FUNKPHP_DIR . '/pipeline/post-response/',
    "pipeline-post-response" => FUNKPHP_DIR . '/pipeline/post-response/',
    "pipelines" => FUNKPHP_DIR . '/pipeline/',
    "routes" => FUNKPHP_DIR . '/routes/',
    "middlewares" => FUNKPHP_DIR . '/middlewares/',
    "pages" => FUNKPHP_DIR . '/page/',
    "p_parts" => FUNKPHP_DIR . '/pages/partials/',
    "p_components" => FUNKPHP_DIR . '/page/components/',
    "p_complete" => FUNKPHP_DIR . '/page/complete/',
    "templates" => PROJECT_DIR . '/template/',
    "tests" => PROJECT_DIR . '/test/',
    "schemas" => PROJECT_DIR . '/schema/',
    "sql" => FUNKPHP_DIR . '/sql/',
    'validations' => FUNKPHP_DIR . '/validation/',
    "backups_finals" => BACKUPS_DIR . '/_FINAL_BACKUPS/',
    "backups_compiled" => BACKUPS_DIR . '/compiled/',
    "backups_routes" => BACKUPS_DIR . '/config/',
    "backups_data" => BACKUPS_DIR . '/data/',
    "backups_pages" => BACKUPS_DIR . '/page/',
    "backups_handlers" => BACKUPS_DIR . '/handler/',
    "backups_middlewares" => BACKUPS_DIR . '/middlewares/',
    "backups_templates" => BACKUPS_DIR . '/template/',
    "backups_cached" => BACKUPS_DIR . '/cached/',
    "backups_config" => BACKUPS_DIR . '/config/',
    "backups_pipeline" => BACKUPS_DIR . '/pipeline/',
    "backups_sql" => BACKUPS_DIR . '/sql/',
    "backups_tests" => BACKUPS_DIR . '/test/',
    "backups_validations" => BACKUPS_DIR . '/validation/',
];
$exactFiles = [
    "troute_route" => $dirs['compiled'] . "troute_route.php",
    "single_pipeline" => $dirs['pipeline'] . "pipeline.php",
    "single_routes" => $dirs['routes'] . "routes.php",
    "tables" => $dirs['config'] . "tables.php",
    "db_local" => $dirs['config'] . "db.php",
    "supported_mysql_data_types" => $dirs['config_valid'] . "valid_mysql_datatypes.php",
];

// List of all functions that are reserved for the framework and
// should not be used in the application code. They are checked against
// when adding any new kind of function that is already reserved.
$reserved_functions = [];
if (is_readable(CLI_DIR . '/cli_reserved.php')) {
    $reserved_functions = include_once CLI_DIR . '/cli_reserved.php';
} else {
    cli_info_without_exit("Reserved Functions List File `cli_reserved.php` NOT FOUND! Attempting to generate a new one...");
    $reserved_functions = cli_update_reserved_functions_list_and_return_as_array();
    cli_success_without_exit("Reserved Functions List File `cli_reserved.php` Generated Successfully. Continuing...");
}
// First restore the folders if they don't exist
cli_restore_default_folders_and_files();

// Load current pipeline, routes, data and pages before processing any commands
$singlePipeline = include_once FUNKPHP_DIR . '/pipeline/pipeline.php' ?? [
    'pipeline' =>
    [
        'request' =>
        [
            0 => ['pl_https_redirect' => null],
            1 => ['pl_run_ini_sets' => null],
            2 => ['pl_set_session_cookie_params' => null],
            3 => ['pl_headers_set' => null],
            4 => ['pl_headers_remove' => null],
            5 => ['pl_start_session' => null],
            6 => ['pl_prepare_uri' => null],
            7 => ['pl_match_denied_exact_ips' => null],
            8 => ['pl_match_denied_methods' => null],
            9 => ['pl_match_denied_uas' => null],
            10 => ['pl_match_route' => [
                'no_match' => [
                    'json' => null,
                    'page' => '404',
                    'callback' => null
                ]
            ]],
            11 => ['pl_run_matched_route_middlewares' => 'defensive'],
            12 => ['pl_run_matched_route_keys' => 'defensive'],
        ],
        'post-response' => [
            0 => ['pl_debug' => null]
        ],
    ],
];
$singleRoutesRoute = include_once FUNKPHP_DIR . '/routes/routes.php' ?? [
    'ROUTES' => ['GET' => [], 'POST' => [], 'PUT' => [], 'DELETE' => [], 'PATCH' => []]
];
$singleTroute = include_once $exactFiles['troute_route'] ?? [
    'GET' =>
    [],
    'POST' =>
    [],
    'PUT' =>
    [],
    'DELETE' =>
    [],
    'PATCH' =>
    [],
];
$tablesAndRelationshipsFile = include_once FUNKPHP_DIR . '/config/tables.php' ?? [
    'tables' => [],
    'relationships' => [],
    'mappings' => [],
    'dependencies' => []
];
$mysqlDataTypesFile = include_once FUNKPHP_DIR . '/config/valid/valid_mysql_datatypes.php' ?? [
    'STRINGS' => [],
    'NUMBERS' => [],
    'INTS' => [],
    'FLOATS' => [],
    'DATETIMES' => [],
    'BLOBS' => []
];
$mysqlOperatorSyntax = include_once FUNKPHP_DIR . '/config/valid/valid_mysql_operators.php' ?? [
    'arithmetic' => [
        '+' => [],
        '-' => [],
        '*' => [],
        '/' => [],
        '%' => [],
    ],
    'bitwise' => [
        '&' => [],
        '|' => [],
        '^' => [],
    ],
    'comparison' => [
        '=' => [],
        '!=' => [],
        '<>' => [],
        '>' => [],
        '>=' => [],
        '<' => [],
        '<=' => [],
        'IS' => [],
    ],
    'compound' => [
        '+=' => [],
        '-=' => [],
        '*=' => [],
        '/=' => [],
        '%=' => [],
        '&=' => [],
        '^-=' => [],
        '|*=' => [],
    ],
    'logical' => [
        'ALL' => [],
        'AND' => [],
        'ANY' => [],
        'BETWEEN' => [],
        'EXISTS' => [],
        'IN' => [],
        'LIKE' => [],
        'NOT' => [],
        'OR' => [],
        'SOME' => [],
    ],
];


// --------------------------------------------------------------------------------
// GLOBAL INTERACTIVE MODE GUARD
// This prevents JSON mode from ever attempting a command with zero arguments.
// --------------------------------------------------------------------------------
if (!$CLI && empty($args)) {
    cli_err('Interactive Mode is NOT supported with JSON Data! You must provide arguments using "arg1", "arg2", etc., keys in the JSON payload.');
}
// --------------------------------------------------------------------------------
// DYNAMIC COMMAND FILE LOADER - Loads based on "$command-$subCommand.php" where
// $subCommand is optional (the use of ":"). Commands are in `src/cli/commands`.
// --------------------------------------------------------------------------------
//  `php funk $command:$subCommand`
if (is_readable(CLI_COMMANDS_DIR . '/' . $command . '-' . $subCommand . '.php')) {
    include CLI_COMMANDS_DIR . '/' . $command . '-' . $subCommand . '.php';
    exit;
}
// `php funk $command`
elseif (is_readable(CLI_COMMANDS_DIR . '/' . $command . '.php')) {
    include CLI_COMMANDS_DIR . '/' . $command . '.php';
    exit;
}
// Command file NOT found, we handle this below - this is the "catch-all" case
else {
    cli_err_syntax_without_exit("Command `$command" . (!empty($subCommand) ? ":$subCommand" : "") . "` not found or is using invalid syntax. Expected `command:optionalSubcommand` which starts up an interactive input session to get more details if needed OR `command:optionalSubcommand prefix1:param1 prefix2:param2 prefixetc:etc3` if you know all parameters upfront. IMPORTANT: Interactive input session is NOT supported in JSON Mode!");
    cli_info("Use the following JSON format: `{ \"command\": \"<command>:<first_param>\", \"arg1\": \"<arg1>\", \"arg2\": \"<arg2>\", \"arg3\": \"<arg3>\", \"arg4\": \"<arg4>\", \"arg5\": \"<arg5>\", \"arg6\": \"<arg6>\" }`");
}
cli_warning("This should not be seen as it should have exit above. Please report the bug to FunkPHP GitHub Issues at `https://github.com/WebbKodsFrilansaren/FunkPHP`!");
exit;
