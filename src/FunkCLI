#!/usr/bin/env php
<?php // Include all CLI Functions needed to manage FunkPHP CLI!
include __DIR__ . '/funkphp/_internals/functions/cli_funs.php';

// Valid commands with valid sub-commands
// Inspiration from Trie & Hashmaps!
$validArg1withArg2Values =  [
    'help' => [],
    'compile' => [
        'r',
        'routes',
        'reserved_list',
        'help'
    ],
    'add' => [
        'r',
        'route',
        'h',
        'handler',
        'middleware',
        'mw',
        'mws',
        'middlewares',
        'd',
        'data',
        'page',
        'mw_all',
        'mw_route',
        'mw_data',
        'mw_page',
        'middleware',
        'table',
        'template',
        'validation',
        'v',
        'help'
    ],
    'change' => [
        'route',
        'data',
        'page',
        'help'
    ],
    'delete' => [
        'r',
        'route',
        'h',
        'handler',
        'd',
        'data',
        'mw',
        'mw_file',
        'middleware',
        'middleware_file',
        'middleware_from_all_routes',
        'mw_from_all_routes',
        'data',
        'page',
        'all_route_compiled_singles_middlewares_and_all_their_handlers_files_i_know_files_will_be_hard_to_get_back',
        'all_route_compiled_and_singles_files_except_handlers_i_know_files_will_be_hard_to_get_back',
        'all_backups_compiled_and_single_files_i_know_files_will_be_hard_to_get_back',
        'all_backups_finals_files_i_know_files_will_be_hard_to_get_back',
        'all_all_backups_files_i_know_files_will_be_hard_to_get_back_and_i_will_cry',
        'help',
    ],
    'restore' => [
        'all_routes_compiled_and_singles_files',
        'route_compiled_and_singles_files',
        'handlers',
        'data_handlers',
        'pages',
        'templates',
        'sql',
        'validations',
        'help'
    ],
];

// No command
if (!isset($argv[1])) {
    cli_err_syntax("No FunkPHP Command was given?!\nShould be at least two arguments!");
}
// Non-existing command
if (!array_key_exists($argv[1], $validArg1withArg2Values)) {
    cli_err_syntax("That FunkCLI Command doesn't exist!");
    exit;
}
// No sub-command
if ($argv[1] !== "help" && !in_array($argv[2] ?? "", $validArg1withArg2Values[$argv[1]])) {
    cli_err_syntax("FunkCLI Command exist, but not that sub-command!");
    exit;
}

// Load the settings file if it exists, otherwise use default settings
$settings = include __DIR__ . '/FunkCLI_Settings' ?? [
    // Default settings for FunkCLI. "ALWAYS_BACKUP_IN" is a list of all the backup settings for the CLI.
    // It is used to determine which files should be backed up when the CLI runs backup-related commands.
    // DO NOT DELETE THIS PART. IT IS REQUIRED FOR THE CLI TO WORK PROPERLY. Change values to true or false.
    // Default is to always backup everything except the actual data handler files and middleware files as of now.
    "ALWAYS_BACKUP_IN" =>
    [
        "COMPILED_IN_BACKUPS" => false,
        "COMPILED_IN_FINAL_BACKUPS" => false,
        "DATA_IN_BACKUPS" => false,
        "DATA_IN_FINAL_BACKUPS" => false,
        "DATA_HANDLERS_IN_BACKUPS" => false,
        "DATA_HANDLERS_IN_FINAL_BACKUPS" => false,
        "DATA_MWS_IN_BACKUPS" => false,
        "DATA_MWS_IN_FINAL_BACKUPS" => false,
        "PAGES_IN_BACKUPS" => false,
        "PAGES_IN_FINAL_BACKUPS" => false,
        "PAGES_HANDLERS_IN_BACKUPS" => false,
        "PAGES_HANDLERS_IN_FINAL_BACKUPS" => false,
        "PAGES_MWS_IN_BACKUPS" => false,
        "PAGES_MWS_IN_FINAL_BACKUPS" => false,
        "ROUTES_IN_BACKUPS" => false,
        "ROUTES_IN_FINAL_BACKUPS" => false,
        "ROUTES_HANDLERS_IN_BACKUPS" => false,
        "ROUTES_HANDLERS_IN_FINAL_BACKUPS" => false,
        "ROUTES_MWS_IN_BACKUPS" => false,
        "ROUTES_MWS_IN_FINAL_BACKUPS" => false,
        "ALLOW_COMPLETE_BACKUP_DELETION" => false,
    ],
];

// All available dirs to use for the CLI
$dirs = [
    "config" => __DIR__ . '/funkphp/config/',
    "_internals" => __DIR__ . '/funkphp/_internals/',
    "compiled" => __DIR__ . '/funkphp/_internals/compiled/',
    "functions" => __DIR__ . '/funkphp/_internals/functions/',
    "_BACKUPS" => __DIR__ . '/funkphp/_BACKUPS/',
    "routes" => __DIR__ . '/funkphp/routes/',
    "handlers" => __DIR__ . '/funkphp/handlers/',
    "middlewares" => __DIR__ . '/funkphp/middlewares/',
    "data" => __DIR__ . '/funkphp/data/',
    "pages" => __DIR__ . '/funkphp/pages/',
    "templates" => __DIR__ . '/funkphp/templates/',
    "sql" => __DIR__ . '/funkphp/sql/',
    'validations' => __DIR__ . '/funkphp/validations/',
    "backups_finals" => __DIR__ . '/funkphp/_BACKUPS/_FINAL_BACKUPS/',
    "backups_compiled" => __DIR__ . '/funkphp/_BACKUPS/compiled/',
    "backups_routes" => __DIR__ . '/funkphp/_BACKUPS/routes/',
    "backups_data" => __DIR__ . '/funkphp/_BACKUPS/data/',
    "backups_pages" => __DIR__ . '/funkphp/_BACKUPS/pages/',
    "backups_handlers" => __DIR__ . '/funkphp/_BACKUPS/handlers/',
    "backups_middlewares" => __DIR__ . '/funkphp/_BACKUPS/middlewares/',
    "backups_templates" => __DIR__ . '/funkphp/_BACKUPS/templates/',
    "backups_cached" => __DIR__ . '/funkphp/_BACKUPS/cached/',
    "backups_config" => __DIR__ . '/funkphp/_BACKUPS/config/',
    "backups_sql" => __DIR__ . '/funkphp/_BACKUPS/sql/',
    "backups_tests" => __DIR__ . '/funkphp/_BACKUPS/tests/',
    "backups_validations" => __DIR__ . '/funkphp/_BACKUPS/validations/',
];

// Exact file paths to use for the CLI
$exactFiles = [
    "troute_route" => $dirs['compiled'] . "troute_route.php",
    "single_routes" => $dirs['routes'] . "route_single_routes.php",
    "tables" => $dirs['config'] . "tables.php",
    "supported_mysql_data_types" => $dirs['_internals'] . "supported_mysql_data_types.php",
];

// List of all functions that are reserved for the framework and
// should not be used in the application code. They are checked against
// when adding a new function as a result of a route/data/page/mw handler.
$reserved_functions =  [
    'cli_generate_a_validation_from_a_table',
    'cli_parse_a_sql_table_file',
    'cli_find_string_outside_quotes',
    'cli_output_tables_file',
    'cli_match_compiled_route',
    'cli_match_developer_route',
    'cli_rebuild_single_routes_route_file',
    'cli_build_compiled_routes',
    'cli_output_compiled_routes',
    'cli_convert_array_to_simple_syntax',
    'cli_restore_default_folders_and_files',
    'cli_data_file_exists',
    'cli_page_file_exists',
    'cli_handler_file_exists',
    'cli_middleware_exists',
    'cli_output_file_until_success',
    'cli_backup_batch',
    'cli_delete_a_route',
    'cli_delete_a_handler_function_or_entire_file',
    'cli_delete_a_data_handler_function_or_entire_file',
    'cli_add_handler',
    'cli_sort_build_routes_compile_and_output',
    'cli_add_a_route',
    'cli_add_a_data_handler',
    'cli_add_a_middleware',
    'cli_delete_a_middleware',
    'cli_delete_a_middleware_from_all_routes',
    'cli_delete_a_middleware_file',
    'cli_compile_batch',
    'cli_backup_all_files_in_folder_to_another_folder',
    'cli_backup_file_until_success',
    'cli_restore_file',
    'cli_get_prefix_code',
    'cli_get_unique_filename_for_dir',
    'cli_delete_all_files_in_directory_except_other_directories',
    'cli_valid_route_start_syntax',
    'cli_prepare_valid_route_string',
    'cli_extracted_parsed_method_from_valid_start_syntax',
    'cli_parse_rest_of_valid_route_syntax_better',
    'cli_err_syntax',
    'cli_err',
    'cli_err_without_exit',
    'cli_err_syntax_without_exit',
    'cli_err_command',
    'cli_success',
    'cli_info',
    'cli_success_without_exit',
    'cli_info_without_exit',
    'cli_info_multiline',
    'cli_warning',
    'cli_warning_without_exit',
    'cli_update_reserved_functions_list',
    'cli_value_exists_as_string_or_in_array',
    'cli_add_value_as_string_or_to_array',
    'dir_exists_is_readable_writable',
    'file_exists_is_readable_writable',
    'is_array_and_not_empty',
    'is_string_and_not_empty',
    'funk_connect_db',
    'funk_validate',
    'funk_run_matched_data_handler',
    'dd',
    'dj',
    'ok',
    'err',
    'fail',
    'success',
    'return_html',
    'return_json',
    'return_code',
    'return_download',
    'array_any_element',
    'str_equals',
    'h_destroy_session',
    'h_headers_remove',
    'h_headers_set',
    'h_headers_setcookie',
    'h_try_default_action',
    'h_run_ini_sets',
    'h_start_session',
    'h_splitOnAndCheckInArray',
    'h_generate_random_password',
    'h_generate_random_number',
    'h_generate_random_user_id',
    'h_generate_random_csrf',
    'funk_https_redirect',
    'funk_match_denied_methods',
    'funk_match_denied_exact_ips',
    'funk_run_middleware_after_matched_routing',
    'r_exit_middleware_running_early_matched_routing',
    'funk_match_denied_uas_fast',
    'funk_match_denied_uas_fast_test',
    'funk_prepare_uri',
    'funk_match_compiled_route',
    'funk_match_developer_route',
    'funk_run_matched_route_handler',
    'r_is_localhost',
];

// First restore the folders if they don't exist
cli_restore_default_folders_and_files();

// Load current routes, data and pages before processing any commands
$singleRoutesRoute = include __DIR__ . '/funkphp/routes/route_single_routes.php' ?? ['ROUTES' => ['GET' => [], 'POST' => [], 'PUT' => [], 'DELETE' => [], 'PATCH' => []]];
$tablesAndRelationshipsFile = include __DIR__ . '/funkphp/config/tables.php' ?? ['tables' => [], 'relationships' => []];
$mysqlDataTypesFile = include __DIR__ . '/funkphp/_internals/supported_mysql_data_types.php' ?? ['STRINGS' => [], 'NUMBERS' => [], 'INTS' => [], 'FLOATS' => [], 'DATETIMES' => [], 'BLOBS' => []];

// Compile only based on user input
// Compile all routes
// Define the command actions map
$commands = [
    'compile' => [
        // 'r' & 'routes' recompiles the Troute & Single Route files!
        'r' => function () {
            // Backup the old route file first (troute and single_routes)
            cli_backup_batch(["troutes", "routes"]);

            // Then build and output new route file
            cli_compile_batch(["troutes"]);
            cli_success("Recompiling means any manually (not through FunkCLI) added middlewares or routing should work now!");
        },
        'routes' => function () {
            // Backup the old route file first (troute and single_routes)
            cli_backup_batch(["troutes", "routes"]);

            // Then build and output new route file
            cli_compile_batch(["troutes"]);
            cli_success("Compiled Only Route routes!");
        },
        // 'help' shows the help for the compile command
        'help' => function () {
            cli_info_multiline("FunkCLI - Compile Help");
            cli_info_multiline("Usage: funkcli compile [all_routes|only_[route|page|data]]");
            cli_info_multiline("The different values:");
            cli_info_multiline("  all_routes - Compiles all routes");
            cli_info_multiline("  only_route - Compiles only route routes");
            cli_info_multiline("  only_page - Compiles only page routes");
            cli_info_multiline("  only_data - Compiles only data routes");
            cli_info_multiline("  These files end up in: funkphp/_internals/compiled/");
            cli_info_multiline("***IMPORTANT 1*** This overwrites the current Troute Files!!!");
            cli_info_multiline("***IMPORTANT 2*** Files are Backed Up in _funkphp/_BACKUPS/compiled/ & _BACKUPS/_FINAL_BACKUPS/!!!");
            exit;
        },
        // 'reserved_list' recompiles the $$reserved_functions variable inside of the FunkCLI File!
        'reserved_list' => function () {
            cli_update_reserved_functions_list();
        },
    ],
    'add' => [
        // Adding to ALL Routes at the same time (Route, Data, Page)
        // Adding Route to only Route Routes
        'route' => function () {
            cli_add_a_route();
        },
        'r' => function () {
            cli_add_a_route();
        },
        'handler' => function () {
            cli_add_handler();
        },
        'h' => function () {
            cli_add_handler();
        },
        'data' => function () {
            cli_add_a_data_handler();
        },
        'd' => function () {
            cli_add_a_data_handler();
        },
        'page' => function () {
            //
        },
        'mw' => function () {
            cli_add_a_middleware();
        },
        'middleware' => function () {
            cli_add_a_middleware();
        },
        'table' => function () {
            cli_parse_a_sql_table_file();
            //cli_output_tables_file(["tables" => [], "relationships" => []]);
        },
        'validation' => function () {

            cli_generate_a_validation_from_a_table();
        },
    ],
    'change' => [
        'route' => function () use ($argv, $settings) {
            if (!isset($argv[3])) {
                cli_err_syntax("No FunkPHP Command was given?!\nShould be at least three arguments!");
            }
            cli_info("[INFO]: Changing route routes (not implemented yet)");
        },
        'page' => function () use ($argv, $settings) {
            if (!isset($argv[3])) {
                cli_err_syntax("No FunkPHP Command was given?!\nShould be at least three arguments!");
            }
            cli_info("[INFO]: Changing page routes (not implemented yet)");
        },
        'data' => function () use ($argv, $settings) {
            if (!isset($argv[3])) {
                cli_err_syntax("No FunkPHP Command was given?!\nShould be at least three arguments!");
            }
            cli_info("[INFO]: Changing data routes (not implemented yet)");
        },
    ],
    'delete' => [
        // Delete a single route for /routes/ folder only
        'route' => function () {
            cli_delete_a_route();
        },
        'r' => function () {
            cli_delete_a_route();
        },
        'handler' => function () use ($argv) {
            cli_delete_a_handler_function_or_entire_file($argv[3] ?? null);
        },
        'h' => function () use ($argv) {
            cli_delete_a_handler_function_or_entire_file($argv[3] ?? null);
        },
        'd' => function () {
            cli_delete_a_data_handler_function_or_entire_file($argv[3] ?? null);
        },
        'data' => function () {
            cli_delete_a_data_handler_function_or_entire_file($argv[3] ?? null);
        },
        'mw' => function () {
            cli_delete_a_middleware();
        },
        'mw_file' => function () {
            cli_delete_a_middleware_file();
        },
        'middleware_file' => function () {
            cli_delete_a_middleware_file();
        },
        'middleware' => function () {
            cli_delete_a_middleware();
        },
        'mw_from_all_routes' => function () {
            cli_delete_a_middleware_from_all_routes();
        },
        'middleware_from_all_routes' => function () {
            cli_delete_a_middleware_from_all_routes();
        },
        // THESE DELETING FUNCTIONS ARE TO DELETE ACTUALLY MOST FILES IN MOST FOLDERS. FUNCTION ABOVE HERE ARE FOR DELETING INSIDE
        // OF FILES SUCH AS ROUTES, MIDDLEWARE, HANDLERS AND SO ON. PROCEED WITH CAUTION USING ANY OF THE FOLLOWING FUNCTIONS!!!
        'all_route_compiled_singles_middlewares_and_all_their_handlers_files_i_know_files_will_be_hard_to_get_back' => function () {
            global $dirs, $settings;
            cli_delete_all_files_in_directory_except_other_directories($dirs['compiled']);
            cli_delete_all_files_in_directory_except_other_directories($dirs['routes']);
            cli_delete_all_files_in_directory_except_other_directories($dirs['data']);
            cli_delete_all_files_in_directory_except_other_directories($dirs['pages']);
            cli_delete_all_files_in_directory_except_other_directories($dirs['handlers']);
            cli_delete_all_files_in_directory_except_other_directories($dirs['middlewares']);
        },
        'all_route_compiled_and_singles_files_except_handlers_i_know_files_will_be_hard_to_get_back' => function () {
            global $dirs, $settings;
            cli_delete_all_files_in_directory_except_other_directories($dirs['compiled']);
            cli_delete_all_files_in_directory_except_other_directories($dirs['routes']);
            cli_delete_all_files_in_directory_except_other_directories($dirs['data']);
            cli_delete_all_files_in_directory_except_other_directories($dirs['pages']);
        },
        // This deletes all backups in the _BACKUPS/compiled, _BACKUPS/data, _BACKUPS/pages
        // & _BACKUPS/routes Subfolders are not deleted such as _BACKUPS/routes/MW/ etc.
        'all_backups_compiled_and_single_files_i_know_files_will_be_hard_to_get_back' => function () {
            global $dirs, $settings;
            $backupCompiledPath = $dirs['backups_compiled'];
            $backupRoutePath = $dirs['backups_routes'];
            $backupDataPath = $dirs['backups_data'];
            $backupPagePath = $dirs['backups_pages'];
            cli_delete_all_files_in_directory_except_other_directories($backupCompiledPath);
            cli_delete_all_files_in_directory_except_other_directories($backupRoutePath);
            cli_delete_all_files_in_directory_except_other_directories($backupDataPath);
            cli_delete_all_files_in_directory_except_other_directories($backupPagePath);
        },
        // This deletes all final backups in the _BACKUPS/_FINAL_BACKUPS ONLY!
        // So, it does NOT delete any other (sub)folders with files in _BACKUPS/
        'all_backups_finals_files_i_know_files_will_be_hard_to_get_back' => function () {
            global $dirs, $settings;
            $backupFinalsPath = $dirs['backups_finals'];
            cli_delete_all_files_in_directory_except_other_directories($backupFinalsPath);
        },
        // Yes, this deletes EVERYTHING BACKUPED. So, think twice before using it!!!
        'all_all_backups_files_i_know_files_will_be_hard_to_get_back_and_i_will_cry' => function () {
            global $dirs, $settings;
            if ($settings['ALLOW_COMPLETE_BACKUP_DELETION'] == false) {
                cli_err_syntax("By default, you are not allowed to delete all backups including final backups! First set ALLOW_COMPLETE_BACKUP_DELETION to true in the settings file (\"src/FunkCLI_Settings\")!");
                exit;
            }
            $backupCompiledPath = $dirs['backups_compiled'];
            $backupRoutePath = $dirs['backups_routes'];
            $backupDataPath = $dirs['backups_data'];
            $backupPagePath = $dirs['backups_pages'];
            $backupFinalsPath = $dirs['backups_finals'];
            cli_delete_all_files_in_directory_except_other_directories($backupCompiledPath);
            cli_delete_all_files_in_directory_except_other_directories($backupRoutePath);
            cli_delete_all_files_in_directory_except_other_directories($backupDataPath);
            cli_delete_all_files_in_directory_except_other_directories($backupPagePath);
            cli_delete_all_files_in_directory_except_other_directories($backupFinalsPath);
        },
    ],
    'restore' => [
        'route_compiled_and_singles_files' => function () {
            global $argv, $dirs, $exactFiles, $settings;
            // Grab backup dir and restore exact file path
            $oldRouteFileDir = $dirs['backups_compiled'];
            $oldSingleRouteFileDir = $dirs['backups_routes'];
            $exactRestorePathTroute = $exactFiles['troute_route'];
            $exactRestorePathSingleRoute = $exactFiles['single_routes'];
            cli_restore_file($oldRouteFileDir, $exactRestorePathTroute, "troute_route");
            cli_restore_file($oldSingleRouteFileDir, $exactRestorePathSingleRoute, "route_single_routes");
        },
        'data_compiled_and_singles_files' => function () {
            global $argv, $dirs, $exactFiles, $settings;
            // Grab backup dir and restore exact file path
            $oldRouteFileDir = $dirs['backups_compiled'];
            $oldSingleRouteFileDir = $dirs['backups_data'];
        },
        'page_compiled_and_singles_files' => function () {
            global $argv, $dirs, $exactFiles, $settings;
            // Grab backup dir and restore exact file path
            $oldRouteFileDir = $dirs['backups_compiled'];
            $oldSingleRouteFileDir = $dirs['backups_pages'];
        },
        'help' => function () {
            cli_info_multiline("FunkCLI - Restore Help");
            cli_info_multiline("Usage: funkcli restore [route_compiled_and_singles_files|data_compiled_and_singles|page_compiled_and_singles]");
            cli_info_multiline("------------------------------------------");
            cli_info_multiline("The different values:");
            cli_info_multiline("  route_compiled_and_singles_files - Restores Compiled & Single Route (including Middlewares) routes from backup (earliest version)");
            cli_info_multiline("  data_compiled_and_singles_files - Restores Compiled & Single Data (including Middlewares) routes from backup (earliest version)");
            cli_info_multiline("  page_compiled_and_singles_files - Restores Compiled & Single Page (including Middlewares) routes from backup (earliest version)");
            cli_info_multiline("  The Troute files end up in: funkphp/_internals/compiled/");
            cli_info_multiline("  The Single Route (& Middleware) files end up in: funkphp/routes/");
            cli_info_multiline("  The Single Data (& Middleware) files end up in: funkphp/data/");
            cli_info_multiline("  The Single Page (& Middleware) files end up in: funkphp/pages/");
            cli_info_multiline("It uses Backup Paths: 'funkphp/_BACKUPS/compiled/', 'funkphp/_BACKUPS/routes/', 'funkphp/_BACKUPS/data/' & 'funkphp/_BACKUPS/pages/'");
            cli_info_multiline("***IMPORTANT 1*** This overwrites the current Troute, Single & Middleware Files!!!");
            cli_info_multiline("***IMPORTANT 2*** The Same Files In _FINAL_BACKUPS Are NOT Removed After Restoration!!!");
            exit;
        },
    ],
    'help' => function () {
        global $argv;
        cli_info_multiline("FunkPHP CLI - Help");
        cli_info_multiline("Usage: funkcli [command] [action] [value]");
        cli_info_multiline("Commands:");
        cli_info_multiline("  compile [all_routes|only_[route|page_route|data_route]] - Compile routes");
        cli_info_multiline("  add [all_routes|only_[route|page_route|data_route]] [value] - Add new routes");
        cli_info_multiline("  change [route|page|data] [oldValue] [newValue]  - Change existing routes");
        cli_info_multiline("  delete [route|page|data] [value] - Delete existing routes");
        exit;
    },
];

// Execute the command with the action if it exists
$command = $argv[1] ?? null;
$action = $argv[2] ?? null;
if (isset($commands[$command]) && $action == null) {
    $commands[$command]();
    exit;
}
if (isset($commands[$command][$action])) {
    $commands[$command][$action]();
    exit;
}

// Catch-all for non-existing commands or actions (or invalid processing of commands)
cli_err_syntax("That FunkCLI Command doesn't exist! Enter ``funkcli help`` for more information!");
exit;
?>