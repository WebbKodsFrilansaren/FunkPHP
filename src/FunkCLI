#!/usr/bin/env php
<?php // Include all CLI Functions needed to manage FunkPHP CLI!
include __DIR__ . '/funkphp/_internals/functions/cli_funs.php';

// Valid commands with valid sub-commands
// Inspiration from Trie & Hashmaps!
$validArg1withArg2Values =  [
    'help' => [],
    'compile' => ['all', 'route', 'data', 'page', 'help'],
    'add' => ['route', 'data', 'page',  'help'],
    'change' => ['route', 'data', 'page',  'help'],
    'delete' => ['route', 'data', 'page',  'help'],
    'restore' => [
        'route_compiled',
        'data_compiled',
        'page_compiled',
        'route_singles',
        'data_singles',
        'page_singles',
        'route_middlwares',
        'data_middlwares',
        'page_middlwares',
        'help'
    ],
];

// No command
if (!isset($argv[1])) {
    cli_err_syntax("No FunkPHP Command was given?!\nShould be at least two arguments!");
}
// Non-existing command
if (!array_key_exists($argv[1], $validArg1withArg2Values)) {
    cli_err_syntax("That FunkCLI Command doesn't exist!");
    exit;
}
// No sub-command
if ($argv[1] !== "help" && !in_array($argv[2] ?? "", $validArg1withArg2Values[$argv[1]])) {
    cli_err_syntax("FunkCLI Command exist, but not that sub-command!");
    exit;
}

// All available dirs to use for the CLI
$outPutDir = __DIR__ . '/funkphp/_internals/compiled/';
$dirs = [
    "compiled" => __DIR__ . '/funkphp/_internals/compiled/',
    "routes" => __DIR__ . '/funkphp/routes/',
    "data" => __DIR__ . '/funkphp/data/',
    "pages" => __DIR__ . '/funkphp/pages/',
    "middlwares" => __DIR__ . '/funkphp/middlewares/',
    "middlwares_routes" => __DIR__ . '/funkphp/middlewares/R/',
    "middlwares_data" => __DIR__ . '/funkphp/middlewares/D/',
    "middlwares_pages" => __DIR__ . '/funkphp/middlewares/P/',
    "backups_finals" => __DIR__ . '/funkphp/_BACKUPS/_FINAL_BACKUPS/',
    "backups_routes" => __DIR__ . '/funkphp/_BACKUPS/routes/',
    "backups_data" => __DIR__ . '/funkphp/_BACKUPS/data/',
    "backups_pages" => __DIR__ . '/funkphp/_BACKUPS/pages/',
    "backups_routes_mw" => __DIR__ . '/funkphp/_BACKUPS/routes/MW/',
    "backups_data_mw" => __DIR__ . '/funkphp/_BACKUPS/data/MW/',
    "backups_pages_mw" => __DIR__ . '/funkphp/_BACKUPS/pages/MW/',
];

// Exact file paths to use for the CLI
$exactFiles = [
    "troute_data" => $dirs['compiled'] . "troute_data.php",
    "troute_page" => $dirs['compiled'] . "troute_page.php",
    "troute_route" => $dirs['compiled'] . "troute_route.php",
    "single_routes" => $dirs['routes'] . "route_single_routes.php",
    "single_middlwares" => $dirs['middlwares'] . "route_single_middlwares.php",
    "single_data" => $dirs['data'] . "data_single_routes.php",
    "single_middlwares_data" => $dirs['middlwares_data'] . "data_single_middlwares.php",
    "single_page" => $dirs['pages'] . "page_single_routes.php",
    "single_middlwares_page" => $dirs['middlwares_pages'] . "page_single_middlwares.php",
];

// Load current routes, data and pages before processing any commands
$singleRoutesRoute = include __DIR__ . '/funkphp/routes/route_single_routes.php';
$singleRoutesData = include __DIR__ . '/funkphp/data/data_single_routes.php';
$singleRoutesPage = include __DIR__ . '/funkphp/pages/page_single_routes.php';
$middlewareRoutesRoute = include  __DIR__ . '/funkphp/routes/route_middleware_routes.php';
$middlewareRoutesData = include __DIR__ . '/funkphp/data/data_middleware_routes.php';
$middlewareRoutesPage = include __DIR__ . '/funkphp/pages/page_middleware_routes.php';

// Compile only based on user input
// Compile all routes
// Define the command actions map
$commands = [
    'compile' => [
        'all' => function () use (
            $singleRoutesRoute,
            $middlewareRoutesRoute,
            $singleRoutesPage,
            $middlewareRoutesPage,
            $singleRoutesData,
            $middlewareRoutesData,
            $exactFiles,
            $dirs
        ) {
            // Backup the old route files first

            // Backup paths
            $backupFinalsPath = $dirs['backups_finals'];

            // Routes
            $oldTrouteRouteFile = $exactFiles['troute_route'];
            $backupRouteRoutePath = $dirs['backups_routes'];
            $oldSingleRouteRouteFile = $exactFiles['single_routes'];
            $oldSingleMiddlwaresRouteFile = $exactFiles['single_middlwares'];

            // Data
            $oldTrouteDataFile = $exactFiles['troute_data'];
            $backupDataRoutePath = $dirs['backups_data'];
            $oldSingleDataFile = $exactFiles['single_data'];
            $oldSingleMiddlwaresDataFile = $exactFiles['single_middlwares_data'];

            // Pages
            $oldTroutePageFile = $exactFiles['troute_page'];
            $backupPageRoutePath = $dirs['backups_pages'];
            $oldSinglePageFile = $exactFiles['single_page'];
            $oldSingleMiddlwaresPageFile = $exactFiles['single_middlwares_page'];

            // Now backup the old route files

            // Routes
            cli_backup_file_until_success($backupRouteRoutePath . "troute_route", ".php", $oldTrouteRouteFile);
            cli_backup_file_until_success($backupFinalsPath . "troute_route", ".php", $oldTrouteRouteFile);
            cli_backup_file_until_success($backupRouteRoutePath . "route_single_routes", ".php", $oldSingleRouteRouteFile);
            cli_backup_file_until_success($backupRouteRoutePath . "route_single_middlwares", ".php", $oldSingleMiddlwaresRouteFile);
            cli_backup_file_until_success($backupFinalsPath . "route_single_routes", ".php", $oldSingleRouteRouteFile);
            cli_backup_file_until_success($backupFinalsPath . "route_single_middlwares", ".php", $oldSingleMiddlwaresRouteFile);

            // Data
            cli_backup_file_until_success($backupDataRoutePath . "troute_data", ".php", $oldTrouteDataFile);
            cli_backup_file_until_success($backupFinalsPath . "troute_data", ".php", $oldTrouteDataFile);
            cli_backup_file_until_success($backupDataRoutePath . "data_single_routes", ".php", $oldSingleDataFile);
            cli_backup_file_until_success($backupDataRoutePath . "data_single_middlwares", ".php", $oldSingleMiddlwaresDataFile);
            cli_backup_file_until_success($backupFinalsPath . "data_single_routes", ".php", $oldSingleDataFile);
            cli_backup_file_until_success($backupFinalsPath . "data_single_middlwares", ".php", $oldSingleMiddlwaresDataFile);

            // Pages
            cli_backup_file_until_success($backupPageRoutePath . "troute_page", ".php", $oldTroutePageFile);
            cli_backup_file_until_success($backupFinalsPath . "troute_page", ".php", $oldTroutePageFile);
            cli_backup_file_until_success($backupPageRoutePath . "page_single_routes", ".php", $oldSinglePageFile);
            cli_backup_file_until_success($backupPageRoutePath . "page_single_middlwares", ".php", $oldSingleMiddlwaresPageFile);
            cli_backup_file_until_success($backupFinalsPath . "page_single_routes", ".php", $oldSinglePageFile);
            cli_backup_file_until_success($backupFinalsPath . "page_single_middlwares", ".php", $oldSingleMiddlwaresPageFile);

            // Then build and output new route files
            $compiledRouteRoutes = cli_build_compiled_routes($singleRoutesRoute['ROUTES'], $middlewareRoutesRoute['MIDDLEWARES']);
            $compiledPageRoutes = cli_build_compiled_routes($singleRoutesPage['ROUTES'], $middlewareRoutesPage['MIDDLEWARES']);
            $compiledDataRoutes = cli_build_compiled_routes($singleRoutesData['ROUTES'], $middlewareRoutesData['MIDDLEWARES']);
            cli_output_compiled_routes($compiledRouteRoutes, "troute_route");
            cli_output_compiled_routes($compiledPageRoutes, "troute_page");
            cli_output_compiled_routes($compiledDataRoutes, "troute_data");
            cli_success("All routes compiled successfully!");
        },
        'route' => function () use ($singleRoutesRoute, $middlewareRoutesRoute, $exactFiles, $dirs) {
            // Backup the old route file first (troute and single_routes)
            $oldRouteFile = $exactFiles['troute_route'];
            $oldSingleRouteFile = $exactFiles['single_routes'];
            $backupRoutePath = $dirs['backups_routes'];
            $backupFinalsPath = $dirs['backups_finals'];
            cli_backup_file_until_success($backupRoutePath . "troute_route", ".php", $oldRouteFile);
            cli_backup_file_until_success($backupFinalsPath . "troute_route", ".php", $oldRouteFile);
            cli_backup_file_until_success($backupRoutePath . "route_single_routes", ".php", $oldSingleRouteFile);
            cli_backup_file_until_success($backupFinalsPath . "route_single_routes", ".php", $oldSingleRouteFile);

            // Then build and output new route file
            $compiledRouteRoutes = cli_build_compiled_routes($singleRoutesRoute['ROUTES'], $middlewareRoutesRoute['MIDDLEWARES']);
            cli_output_compiled_routes($compiledRouteRoutes, "troute_route");
            cli_success("Compiled Only Route routes!");
        },
        'data' => function () use ($singleRoutesData, $middlewareRoutesData, $exactFiles, $dirs) {
            // Backup the old route file first
            $oldRouteFile = $exactFiles['troute_data'];
            $oldSingleRouteFile = $exactFiles['single_data'];
            $backupRoutePath = $dirs['backups_data'];
            $backupFinalsPath = $dirs['backups_finals'];
            cli_backup_file_until_success($backupRoutePath . "troute_data", ".php", $oldRouteFile);
            cli_backup_file_until_success($backupFinalsPath . "troute_data", ".php", $oldRouteFile);
            cli_backup_file_until_success($backupRoutePath . "data_single_routes", ".php", $oldSingleRouteFile);
            cli_backup_file_until_success($backupFinalsPath . "data_single_routes", ".php", $oldSingleRouteFile);

            // Then build and output new route file
            $compiledDataRoutes = cli_build_compiled_routes($singleRoutesData['ROUTES'], $middlewareRoutesData['MIDDLEWARES']);
            cli_output_compiled_routes($compiledDataRoutes, "troute_data");
            cli_success("Compiled Only Data routes!");
        },
        'page' => function () use ($singleRoutesPage, $middlewareRoutesPage, $exactFiles, $dirs) {
            // Backup the old route file first
            $oldRouteFile = $exactFiles['troute_page'];
            $oldSingleRouteFile = $exactFiles['single_page'];
            $backupRoutePath = $dirs['backups_pages'];
            $backupFinalsPath = $dirs['backups_finals'];
            cli_backup_file_until_success($backupRoutePath . "troute_page", ".php", $oldRouteFile);
            cli_backup_file_until_success($backupFinalsPath . "troute_page", ".php", $oldRouteFile);
            cli_backup_file_until_success($backupRoutePath . "page_single_routes", ".php", $oldSingleRouteFile);
            cli_backup_file_until_success($backupFinalsPath . "page_single_routes", ".php", $oldSingleRouteFile);

            // Then build and output new route file
            $compiledPageRoutes = cli_build_compiled_routes($singleRoutesPage['ROUTES'], $middlewareRoutesPage['MIDDLEWARES']);
            cli_output_compiled_routes($compiledPageRoutes, "troute_page");
            cli_success("Compiled Only Page routes!");
        },
        'help' => function () {
            cli_info_multiline("FunkCLI - Compile Help");
            cli_info_multiline("Usage: funkcli compile [all|route|page|data]");
            cli_info_multiline("The different values:");
            cli_info_multiline("  all - Compiles all routes");
            cli_info_multiline("  route - Compiles only route routes");
            cli_info_multiline("  page - Compiles only page routes");
            cli_info_multiline("  data - Compiles only data routes");
            cli_info_multiline("  These files end up in: funkphp/_internals/compiled/");
            exit;
        },
    ],
    'add' => [
        'route' => function () use ($argv, $outPutDir) {
            if (!isset($argv[3]) || !is_string($argv[3]) || empty($argv[3])) {
                cli_err_syntax("No FunkPHP Command was given?!\nShould be at least three non-empty string arguments!");
            }
            cli_info("Adding route routes (not implemented yet)");
        },
        'page' => function () use ($argv) {
            if (!isset($argv[3])) {
                cli_err_syntax("No FunkPHP Command was given?!\nShould be at least three arguments!");
            }
            cli_info("Adding page routes (not implemented yet)");
        },
        'data' => function () use ($argv) {
            if (!isset($argv[3])) {
                cli_err_syntax("No FunkPHP Command was given?!\nShould be at least three arguments!");
            }
            cli_info("Adding data routes (not implemented yet)");
        },
    ],
    'change' => [
        'route' => function () use ($argv) {
            if (!isset($argv[3])) {
                cli_err_syntax("No FunkPHP Command was given?!\nShould be at least three arguments!");
            }
            cli_info("[INFO]: Changing route routes (not implemented yet)");
        },
        'page' => function () use ($argv) {
            if (!isset($argv[3])) {
                cli_err_syntax("No FunkPHP Command was given?!\nShould be at least three arguments!");
            }
            cli_info("[INFO]: Changing page routes (not implemented yet)");
        },
        'data' => function () use ($argv) {
            if (!isset($argv[3])) {
                cli_err_syntax("No FunkPHP Command was given?!\nShould be at least three arguments!");
            }
            cli_info("[INFO]: Changing data routes (not implemented yet)");
        },
    ],
    'delete' => [
        'route' => function () use ($argv) {
            if (!isset($argv[3])) {
                cli_err_syntax("No FunkPHP Command was given?!\nShould be at least three arguments!");
            }
            cli_info("[INFO]: Deleting route routes (not implemented yet)");;
        },
        'page' => function () use ($argv) {
            if (!isset($argv[3])) {
                cli_err_syntax("No FunkPHP Command was given?!\nShould be at least three arguments!");
            }
            cli_info("[INFO]: Deleting page routes (not implemented yet)");
        },
        'data' => function () use ($argv) {
            if (!isset($argv[3])) {
                cli_err_syntax("No FunkPHP Command was given?!\nShould be at least three arguments!");
            }
            cli_info("[INFO]: Deleting data routes (not implemented yet)");;
        },
    ],
    'restore' => [
        'route_compiled' => function () use ($argv, $dirs, $exactFiles) {
            // Grab backup dir and restore exact file path
            $oldRouteFileDir = $dirs['backups_routes'];
            $exactRestorePath = $exactFiles['troute_route'];

            cli_restore_file($oldRouteFileDir, $exactRestorePath, "troute_route");
        },
        'page_compiled' => function () use ($argv, $dirs, $exactFiles) {
            if (!isset($argv[3])) {
                cli_err_syntax("No FunkPHP Command was given?!\nShould be at least three arguments!");
            }
            cli_info("Restoring page routes (not implemented yet)");
        },
        'data_compiled' => function () use ($argv, $dirs, $exactFiles) {
            if (!isset($argv[3])) {
                cli_err_syntax("No FunkPHP Command was given?!\nShould be at least three arguments!");
            }
            cli_info("Restoring data routes (not implemented yet)");
        },
        'help' => function () {
            cli_info_multiline("FunkCLI - Restore Help");
            cli_info_multiline("Usage 1: funkcli restore [route_compiled|data_compiled|page_compiled]");
            cli_info_multiline("Usage 2: funkcli restore [route_singles|data_singles|page_singles]");
            cli_info_multiline("Usage 3: funkcli restore [route_middlwares|data_middlwares|page_middlwares]");
            cli_info_multiline("------------------------------------------");
            cli_info_multiline("The different values (for Usage 1:");
            cli_info_multiline("  route_compiled - Restores Compiled Route routes from backup (earliest version)");
            cli_info_multiline("  data_compiled - Restores Compiled Data routes from backup (earliest version)");
            cli_info_multiline("  page_compiled - Restores Compiled Page routes from backup (earliest version)");
            cli_info_multiline("  These files end up in: funkphp/_internals/compiled/");
            cli_info_multiline("It uses Backup Path: funkphp/_BACKUPS/[routes|pages|data]/");
            cli_info_multiline("***IMPORTANT*** This overwrites the current Troute File!!!");
            cli_info_multiline("------------------------------------------");
            cli_info_multiline("The different values (for Usage 2:");
            cli_info_multiline("  route_singles - Restores Single Route routes from backup (earliest version)");
            cli_info_multiline("  data_singles - Restores Single Data routes from backup (earliest version)");
            cli_info_multiline("  page_singles - Restores Single Page routes from backup (earliest version)");
            cli_info_multiline("  These files end up in: [funkphp/routes|funkphp/data|funkphp/pages]/");
            cli_info_multiline("It uses Backup Path: funkphp/_BACKUPS/[routes|pages|data]/");
            cli_info_multiline("***IMPORTANT*** This overwrites the current Single Route File!!!");
            cli_info_multiline("------------------------------------------");
            cli_info_multiline("The different values (for Usage 3:");
            cli_info_multiline("  route_middlwares - Restores Single Route routes from backup (earliest version)");
            cli_info_multiline("  data_middlwares - Restores Single Data routes from backup (earliest version)");
            cli_info_multiline("  page_middlwares - Restores Single Page routes from backup (earliest version)");
            cli_info_multiline("  These files end up in: [funkphp/routes|funkphp/data|funkphp/pages]/");
            cli_info_multiline("It uses Backup Path: funkphp/_BACKUPS/[routes/MW|pages/MW|data/MW]/");
            cli_info_multiline("***IMPORTANT*** This overwrites the current Middleware Route File!!!");

            exit;
        },
    ],

    'help' => function () use ($argv) {
        cli_info_multiline("FunkPHP CLI - Help");
        cli_info_multiline("Usage: funkcli [command] [action] [value]");
        cli_info_multiline("Commands:");
        cli_info_multiline("  compile [all|route|page|data] - Compile routes");
        cli_info_multiline("  add [route|page|data] [value] - Add new routes");
        cli_info_multiline("  change [route|page|data] [oldValue] [newValue]  - Change existing routes");
        cli_info_multiline("  delete [route|page|data] [value] - Delete existing routes");
        exit;
    },
];

// Execute the command with the action if it exists
$command = $argv[1] ?? null;
$action = $argv[2] ?? null;
if (isset($commands[$command]) && $action == null) {
    $commands[$command]();
    exit;
}
if (isset($commands[$command][$action])) {
    $commands[$command][$action]();
    exit;
}

// All-catch for invalid use of FunkCLI
else {
    cli_err_syntax("That FunkCLI Command doesn't exist! Enter ``funkcli help`` for more information!");
    exit;
}
exit;
?>