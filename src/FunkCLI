#!/usr/bin/env php
<?php // Include all CLI Functions needed to manage FunkPHP CLI!
include __DIR__ . '/funkphp/_internals/functions/cli_funs.php';

// Valid commands with valid sub-commands
// Inspiration from Trie & Hashmaps!
$validArg1withArg2Values =  [
    'help' => [],
    'compile' => ['all', 'route', 'page', 'data', 'help'],
    'add' => ['route', 'page', 'data', 'help'],
    'change' => ['route', 'page', 'data', 'help'],
    'delete' => ['route', 'page', 'data', 'help'],
];

// No command
if (!isset($argv[1])) {
    cli_err_syntax("No FunkPHP Command was given?!\nShould be at least two arguments!");
}
// Non-existing command
if (!array_key_exists($argv[1], $validArg1withArg2Values)) {
    cli_err_syntax("That FunkCLI Command doesn't exist!");
    exit;
}
// No sub-command
if ($argv[1] !== "help" && !in_array($argv[2] ?? "", $validArg1withArg2Values[$argv[1]])) {
    cli_err_syntax("FunkCLI Command exist, but not that sub-command!");
    exit;
}

$outPutDir = __DIR__ . '/funkphp/_internals/compiled/';
$singleRoutesRoute = include __DIR__ . '/funkphp/routes/route_single_routes.php';
$singleRoutesData = include __DIR__ . '/funkphp/data/data_single_routes.php';
$singleRoutesPage = include __DIR__ . '/funkphp/pages/page_single_routes.php';
$middlewareRoutesRoute = include  __DIR__ . '/funkphp/routes/route_middleware_routes.php';
$middlewareRoutesData = include __DIR__ . '/funkphp/data/data_middleware_routes.php';
$middlewareRoutesPage = include __DIR__ . '/funkphp/pages/page_middleware_routes.php';

// Compile only based on user input
// Compile all routes
// Define the command actions map
$commands = [
    'compile' => [
        'all' => function () use (
            $singleRoutesRoute,
            $middlewareRoutesRoute,
            $singleRoutesPage,
            $middlewareRoutesPage,
            $singleRoutesData,
            $middlewareRoutesData,
            $outPutDir
        ) {
            $compiledRouteRoutes = cli_build_compiled_routes($singleRoutesRoute, $middlewareRoutesRoute);
            $compiledPageRoutes = cli_build_compiled_routes($singleRoutesPage, $middlewareRoutesPage);
            $compiledDataRoutes = cli_build_compiled_routes($singleRoutesData, $middlewareRoutesData);
            cli_output_compiled_routes($compiledRouteRoutes, "troute_route");
            cli_output_compiled_routes($compiledPageRoutes, "troute_page");
            cli_output_compiled_routes($compiledDataRoutes, "troute_data");
            cli_success("All routes compiled successfully!");
        },
        'route' => function () use ($singleRoutesRoute, $middlewareRoutesRoute, $outPutDir) {
            $compiledRouteRoutes = cli_build_compiled_routes($singleRoutesRoute, $middlewareRoutesRoute);
            cli_output_compiled_routes($compiledRouteRoutes, "troute_route");
            cli_success("Compiled Only Route routes!");
        },
        'page' => function () use ($singleRoutesPage, $middlewareRoutesPage, $outPutDir) {
            $compiledPageRoutes = cli_build_compiled_routes($singleRoutesPage, $middlewareRoutesPage);
            cli_output_compiled_routes($compiledPageRoutes, "troute_page");
            cli_success("Compiled Only Page routes!");
        },
        'data' => function () use ($singleRoutesData, $middlewareRoutesData, $outPutDir) {
            $compiledDataRoutes = cli_build_compiled_routes($singleRoutesData, $middlewareRoutesData);
            cli_output_compiled_routes($compiledDataRoutes, "troute_data");
            cli_success("Compiled Only Data routes!");
        },
        'help' => function () {
            cli_info_multiline("FunkCLI - Compile Help");
            cli_info_multiline("Usage: funkcli compile [all|route|page|data]");
            cli_info_multiline("The different values:");
            cli_info_multiline("  all - Compiles all routes");
            cli_info_multiline("  route - Compiles only route routes");
            cli_info_multiline("  page - Compiles only page routes");
            cli_info_multiline("  data - Compiles only data routes");
            cli_info_multiline("  These files end up in: funkphp/_internals/compiled/");
            exit;
        },
    ],
    'add' => [
        'route' => function () use ($argv) {
            if (!isset($argv[3])) {
                cli_err_syntax("No FunkPHP Command was given?!\nShould be at least three arguments!");
            }
            cli_info("[INFO]: Adding route routes (not implemented yet)");
        },
        'page' => function () use ($argv) {
            if (!isset($argv[3])) {
                cli_err_syntax("No FunkPHP Command was given?!\nShould be at least three arguments!");
            }
            cli_info("[INFO]: Adding page routes (not implemented yet)");
        },
        'data' => function () use ($argv) {
            if (!isset($argv[3])) {
                cli_err_syntax("No FunkPHP Command was given?!\nShould be at least three arguments!");
            }
            cli_info("[INFO]: Adding data routes (not implemented yet)");
        },
    ],
    'change' => [
        'route' => function () use ($argv) {
            if (!isset($argv[3])) {
                cli_err_syntax("No FunkPHP Command was given?!\nShould be at least three arguments!");
            }
            cli_info("[INFO]: Changing route routes (not implemented yet)");
        },
        'page' => function () use ($argv) {
            if (!isset($argv[3])) {
                cli_err_syntax("No FunkPHP Command was given?!\nShould be at least three arguments!");
            }
            cli_info("[INFO]: Changing page routes (not implemented yet)");
        },
        'data' => function () use ($argv) {
            if (!isset($argv[3])) {
                cli_err_syntax("No FunkPHP Command was given?!\nShould be at least three arguments!");
            }
            cli_info("[INFO]: Changing data routes (not implemented yet)");
        },
    ],
    'delete' => [
        'route' => function () use ($argv) {
            if (!isset($argv[3])) {
                cli_err_syntax("No FunkPHP Command was given?!\nShould be at least three arguments!");
            }
            cli_info("[INFO]: Deleting route routes (not implemented yet)");;
        },
        'page' => function () use ($argv) {
            if (!isset($argv[3])) {
                cli_err_syntax("No FunkPHP Command was given?!\nShould be at least three arguments!");
            }
            cli_info("[INFO]: Deleting page routes (not implemented yet)");
        },
        'data' => function () use ($argv) {
            if (!isset($argv[3])) {
                cli_err_syntax("No FunkPHP Command was given?!\nShould be at least three arguments!");
            }
            cli_info("[INFO]: Deleting data routes (not implemented yet)");;
        },
    ],
    'help' => function () use ($argv) {
        cli_info_multiline("FunkPHP CLI - Help");
        cli_info_multiline("Usage: funkcli [command] [action] [value]");
        cli_info_multiline("Commands:");
        cli_info_multiline("  compile [all|route|page|data] - Compile routes");
        cli_info_multiline("  add [route|page|data] [value] - Add new routes");
        cli_info_multiline("  change [route|page|data] [oldValue] [newValue]  - Change existing routes");
        cli_info_multiline("  delete [route|page|data] [value] - Delete existing routes");
        exit;
    },
];

// Execute the command
$command = $argv[1] ?? null;
$action = $argv[2] ?? null;


if (isset($commands[$command]) && $action == null) {
    $commands[$command]();
    exit;
}

if (isset($commands[$command][$action])) {
    $commands[$command][$action]();
    exit;
} else {
    cli_err_syntax("That FunkCLI Command doesn't exist! Enter ``funkcli help`` for more information!");
    exit;
}
exit;
?>