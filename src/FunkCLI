#!/usr/bin/env php
<?php // Include all CLI Functions needed to manage FunkPHP CLI!
include __DIR__ . '/funkphp/_internals/functions/cli_funs.php';

// Valid commands with valid sub-commands
// Inspiration from Trie & Hashmaps!
$validArg1withArg2Values =  [
    'help' => [],
    'compile' => [
        'all_routes',
        'only_route',
        'only_data',
        'only_page',
        'help'
    ],
    'add' => [
        'all_routes',
        'only_route',
        'only_data_route',
        'only_page_route',
        'mw',
        'middleware',
        'help'
    ],
    'change' => [
        'route',
        'data',
        'page',
        'help'
    ],
    'delete' => [
        'all_route_compiled_and_singles',
        'all_backups_compiled_and_single_files_i_know_files_will_be_hard_to_get_back',
        'all_backups_finals_files_i_know_files_will_be_hard_to_get_back',
        'all_all_backups_files_i_know_files_will_be_hard_to_get_back_and_i_will_cry',
        'help',
    ],
    'restore' => [
        'all_routes_compiled_and_singles_files',
        'route_compiled_and_singles_files',
        'data_compiled_and_singles_files',
        'page_compiled_and_singles_files',
        'help'
    ],
];

// No command
if (!isset($argv[1])) {
    cli_err_syntax("No FunkPHP Command was given?!\nShould be at least two arguments!");
}
// Non-existing command
if (!array_key_exists($argv[1], $validArg1withArg2Values)) {
    cli_err_syntax("That FunkCLI Command doesn't exist!");
    exit;
}
// No sub-command
if ($argv[1] !== "help" && !in_array($argv[2] ?? "", $validArg1withArg2Values[$argv[1]])) {
    cli_err_syntax("FunkCLI Command exist, but not that sub-command!");
    exit;
}

// Load the settings file if it exists, otherwise use default settings
$settings = include __DIR__ . '/FunkCLI_Settings' ?? [
    // Default settings for FunkCLI. "ALWAYS_BACKUP_IN" is a list of all the backup settings for the CLI.
    // It is used to determine which files should be backed up when the CLI runs backup-related commands.
    // DO NOT DELETE THIS PART. IT IS REQUIRED FOR THE CLI TO WORK PROPERLY. Change values to true or false.
    // Default is to always backup everything except the actual data handler files and middleware files as of now.
    "ALWAYS_BACKUP_IN" =>
    [
        "COMPILED_IN_BACKUPS" => true,
        "COMPILED_IN_FINAL_BACKUPS" => true,
        "DATA_IN_BACKUPS" => true,
        "DATA_IN_FINAL_BACKUPS" => true,
        "DATA_HANDLERS_IN_BACKUPS" => false,
        "DATA_HANDLERS_IN_FINAL_BACKUPS" => false,
        "DATA_MWS_IN_BACKUPS" => false,
        "DATA_MWS_IN_FINAL_BACKUPS" => false,
        "PAGES_IN_BACKUPS" => true,
        "PAGES_IN_FINAL_BACKUPS" => true,
        "PAGES_HANDLERS_IN_BACKUPS" => false,
        "PAGES_HANDLERS_IN_FINAL_BACKUPS" => false,
        "PAGES_MWS_IN_BACKUPS" => false,
        "PAGES_MWS_IN_FINAL_BACKUPS" => false,
        "ROUTES_IN_BACKUPS" => true,
        "ROUTES_IN_FINAL_BACKUPS" => true,
        "ROUTES_HANDLERS_IN_BACKUPS" => false,
        "ROUTES_HANDLERS_IN_FINAL_BACKUPS" => false,
        "ROUTES_MWS_IN_BACKUPS" => false,
        "ROUTES_MWS_IN_FINAL_BACKUPS" => false,
        "ALLOW_COMPLETE_BACKUP_DELETION" => false,
    ],
];

// All available dirs to use for the CLI
$outPutDir = __DIR__ . '/funkphp/_internals/compiled/';
$dirs = [
    "compiled" => __DIR__ . '/funkphp/_internals/compiled/',
    "routes" => __DIR__ . '/funkphp/routes/',
    "data" => __DIR__ . '/funkphp/data/',
    "pages" => __DIR__ . '/funkphp/pages/',
    "middlewares" => __DIR__ . '/funkphp/middlewares/',
    "middlewares_routes" => __DIR__ . '/funkphp/middlewares/R/',
    "middlewares_data" => __DIR__ . '/funkphp/middlewares/D/',
    "middlewares_pages" => __DIR__ . '/funkphp/middlewares/P/',
    "backups_finals" => __DIR__ . '/funkphp/_BACKUPS/_FINAL_BACKUPS/',
    "backups_compiled" => __DIR__ . '/funkphp/_BACKUPS/compiled/',
    "backups_routes" => __DIR__ . '/funkphp/_BACKUPS/routes/',
    "backups_data" => __DIR__ . '/funkphp/_BACKUPS/data/',
    "backups_pages" => __DIR__ . '/funkphp/_BACKUPS/pages/',
    "backups_routes_mw" => __DIR__ . '/funkphp/_BACKUPS/routes/MW/',
    "backups_data_mw" => __DIR__ . '/funkphp/_BACKUPS/data/MW/',
    "backups_pages_mw" => __DIR__ . '/funkphp/_BACKUPS/pages/MW/',
];

// Exact file paths to use for the CLI
$exactFiles = [
    "troute_data" => $dirs['compiled'] . "troute_data.php",
    "troute_page" => $dirs['compiled'] . "troute_page.php",
    "troute_route" => $dirs['compiled'] . "troute_route.php",
    "single_routes" => $dirs['routes'] . "route_single_routes.php",
    "single_middlewares" => $dirs['routes'] . "route_middleware_routes.php",
    "single_data" => $dirs['data'] . "data_single_routes.php",
    "single_middlewares_data" => $dirs['data'] . "data_middleware_routes.php",
    "single_page" => $dirs['pages'] . "page_single_routes.php",
    "single_middlewares_page" => $dirs['pages'] . "page_middleware_routes.php",
];

// Load current routes, data and pages before processing any commands
$singleRoutesRoute = include __DIR__ . '/funkphp/routes/route_single_routes.php';
$singleRoutesData = include __DIR__ . '/funkphp/data/data_single_routes.php';
$singleRoutesPage = include __DIR__ . '/funkphp/pages/page_single_routes.php';
$middlewareRoutesRoute = include  __DIR__ . '/funkphp/routes/route_middleware_routes.php';
$middlewareRoutesData = include __DIR__ . '/funkphp/data/data_middleware_routes.php';
$middlewareRoutesPage = include __DIR__ . '/funkphp/pages/page_middleware_routes.php';

// Compile only based on user input
// Compile all routes
// Define the command actions map
$commands = [
    'compile' => [
        'all_routes' => function () use (
            $singleRoutesRoute,
            $middlewareRoutesRoute,
            $singleRoutesPage,
            $middlewareRoutesPage,
            $singleRoutesData,
            $middlewareRoutesData,
            $exactFiles,
            $dirs,
            $settings
        ) {
            // Backup the old route files first

            // Backup paths
            $backupFinalsPath = $dirs['backups_finals'];
            $backupCompiledPath = $dirs['backups_compiled'];
            $backupRouteRoutePath = $dirs['backups_routes'];
            $backupDataRoutePath = $dirs['backups_data'];
            $backupPageRoutePath = $dirs['backups_pages'];

            // Routes
            $oldTrouteRouteFile = $exactFiles['troute_route'];
            $oldSingleRouteRouteFile = $exactFiles['single_routes'];
            $oldSingleMiddlwaresRouteFile = $exactFiles['single_middlewares'];

            // Data
            $oldTrouteDataFile = $exactFiles['troute_data'];
            $oldSingleDataFile = $exactFiles['single_data'];
            $oldSingleMiddlwaresDataFile = $exactFiles['single_middlewares_data'];

            // Pages
            $oldTroutePageFile = $exactFiles['troute_page'];
            $oldSinglePageFile = $exactFiles['single_page'];
            $oldSingleMiddlwaresPageFile = $exactFiles['single_middlewares_page'];

            // Now backup the old route files

            // Routes
            if ($settings['ALWAYS_BACKUP_IN']['COMPILED_IN_BACKUPS']) {
                cli_backup_file_until_success($backupCompiledPath . "troute_route", ".php", $oldTrouteRouteFile);
            }
            if ($settings['ALWAYS_BACKUP_IN']['COMPILED_IN_FINAL_BACKUPS']) {
                cli_backup_file_until_success($backupFinalsPath . "troute_route", ".php", $oldTrouteRouteFile);
            }
            if ($settings['ALWAYS_BACKUP_IN']['ROUTES_IN_BACKUPS']) {
                cli_backup_file_until_success($backupRouteRoutePath . "route_single_routes", ".php", $oldSingleRouteRouteFile);
                cli_backup_file_until_success($backupRouteRoutePath . "route_middleware_routes", ".php", $oldSingleMiddlwaresRouteFile);
            }
            if ($settings['ALWAYS_BACKUP_IN']['ROUTES_IN_FINAL_BACKUPS']) {
                cli_backup_file_until_success($backupFinalsPath . "route_single_routes", ".php", $oldSingleRouteRouteFile);
                cli_backup_file_until_success($backupFinalsPath . "route_middleware_routes", ".php", $oldSingleMiddlwaresRouteFile);
            }

            // Data
            if ($settings['ALWAYS_BACKUP_IN']['COMPILED_IN_BACKUPS']) {
                cli_backup_file_until_success($backupCompiledPath . "troute_data", ".php", $oldTrouteDataFile);
            }
            if ($settings['ALWAYS_BACKUP_IN']['COMPILED_IN_FINAL_BACKUPS']) {
                cli_backup_file_until_success($backupFinalsPath . "troute_data", ".php", $oldTrouteDataFile);
            }
            if ($settings['ALWAYS_BACKUP_IN']['DATA_IN_BACKUPS']) {
                cli_backup_file_until_success($backupDataRoutePath . "data_single_routes", ".php", $oldSingleDataFile);
                cli_backup_file_until_success($backupDataRoutePath . "data_middleware_routes", ".php", $oldSingleMiddlwaresDataFile);
            }
            if ($settings['ALWAYS_BACKUP_IN']['DATA_IN_FINAL_BACKUPS']) {
                cli_backup_file_until_success($backupFinalsPath . "data_single_routes", ".php", $oldSingleDataFile);
                cli_backup_file_until_success($backupFinalsPath . "data_middleware_routes", ".php", $oldSingleMiddlwaresDataFile);
            }

            // Pages
            if ($settings['ALWAYS_BACKUP_IN']['COMPILED_IN_BACKUPS']) {
                cli_backup_file_until_success($backupCompiledPath . "troute_page", ".php", $oldTroutePageFile);
            }
            if ($settings['ALWAYS_BACKUP_IN']['COMPILED_IN_FINAL_BACKUPS']) {
                cli_backup_file_until_success($backupFinalsPath . "troute_page", ".php", $oldTroutePageFile);
            }

            if ($settings['ALWAYS_BACKUP_IN']['PAGES_IN_BACKUPS']) {
                cli_backup_file_until_success($backupPageRoutePath . "page_single_routes", ".php", $oldSinglePageFile);
                cli_backup_file_until_success($backupPageRoutePath . "page_middleware_routes", ".php", $oldSingleMiddlwaresPageFile);
            }
            if ($settings['ALWAYS_BACKUP_IN']['PAGES_IN_FINAL_BACKUPS']) {

                cli_backup_file_until_success($backupFinalsPath . "page_single_routes", ".php", $oldSinglePageFile);
                cli_backup_file_until_success($backupFinalsPath . "page_middleware_routes", ".php", $oldSingleMiddlwaresPageFile);
            }

            // Then build and output new route files
            $compiledRouteRoutes = cli_build_compiled_routes($singleRoutesRoute['ROUTES'], $middlewareRoutesRoute['MIDDLEWARES']);
            $compiledPageRoutes = cli_build_compiled_routes($singleRoutesPage['ROUTES'], $middlewareRoutesPage['MIDDLEWARES']);
            $compiledDataRoutes = cli_build_compiled_routes($singleRoutesData['ROUTES'], $middlewareRoutesData['MIDDLEWARES']);
            cli_output_compiled_routes($compiledRouteRoutes, "troute_route");
            cli_output_compiled_routes($compiledPageRoutes, "troute_page");
            cli_output_compiled_routes($compiledDataRoutes, "troute_data");
            cli_success("All routes compiled successfully!");
        },
        'only_route' => function () use ($singleRoutesRoute, $middlewareRoutesRoute, $exactFiles, $dirs, $settings) {
            // Backup the old route file first (troute and single_routes)
            $oldRouteFile = $exactFiles['troute_route'];
            $oldSingleRouteFile = $exactFiles['single_routes'];
            $oldSingleRouteMiddlewareFile = $exactFiles['single_middlewares'];
            $backupRoutePath = $dirs['backups_routes'];
            $backupCompiledPath = $dirs['backups_compiled'];
            $backupFinalsPath = $dirs['backups_finals'];

            if ($settings['ALWAYS_BACKUP_IN']['COMPILED_IN_BACKUPS']) {
                cli_backup_file_until_success($backupCompiledPath . "troute_route", ".php", $oldRouteFile);
            }
            if ($settings['ALWAYS_BACKUP_IN']['COMPILED_IN_FINAL_BACKUPS']) {
                cli_backup_file_until_success($backupFinalsPath . "troute_route", ".php", $oldRouteFile);
            }

            if ($settings['ALWAYS_BACKUP_IN']['ROUTES_IN_BACKUPS']) {
                cli_backup_file_until_success($backupRoutePath . "route_single_routes", ".php", $oldSingleRouteFile);
                cli_backup_file_until_success($backupRoutePath . "route_middleware_routes", ".php", $oldSingleRouteMiddlewareFile);
            }
            if ($settings['ALWAYS_BACKUP_IN']['ROUTES_IN_FINAL_BACKUPS']) {
                cli_backup_file_until_success($backupFinalsPath . "route_single_routes", ".php", $oldSingleRouteFile);
                cli_backup_file_until_success($backupFinalsPath . "route_middleware_routes", ".php", $oldSingleRouteMiddlewareFile);
            }

            // Then build and output new route file
            $compiledRouteRoutes = cli_build_compiled_routes($singleRoutesRoute['ROUTES'], $middlewareRoutesRoute['MIDDLEWARES']);
            cli_output_compiled_routes($compiledRouteRoutes, "troute_route");
            cli_success("Compiled Only Route routes!");
        },
        'only_data' => function () use ($singleRoutesData, $middlewareRoutesData, $exactFiles, $dirs, $settings) {
            // Backup the old route file first
            $oldRouteFile = $exactFiles['troute_data'];
            $oldSingleRouteFile = $exactFiles['single_data'];
            $oldSingleRouteMiddlewareFile = $exactFiles['single_middlewares_data'];
            $backupRoutePath = $dirs['backups_data'];
            $backupCompiledPath = $dirs['backups_compiled'];
            $backupFinalsPath = $dirs['backups_finals'];

            if ($settings['ALWAYS_BACKUP_IN']['COMPILED_IN_BACKUPS']) {
                cli_backup_file_until_success($backupCompiledPath . "troute_data", ".php", $oldRouteFile);
            }
            if ($settings['ALWAYS_BACKUP_IN']['COMPILED_IN_FINAL_BACKUPS']) {
                cli_backup_file_until_success($backupFinalsPath . "troute_data", ".php", $oldRouteFile);
            }
            if ($settings['ALWAYS_BACKUP_IN']['DATA_IN_BACKUPS']) {
                cli_backup_file_until_success($backupRoutePath . "data_single_routes", ".php", $oldSingleRouteFile);
                cli_backup_file_until_success($backupRoutePath . "data_middleware_routes", ".php", $oldSingleRouteMiddlewareFile);
            }
            if ($settings['ALWAYS_BACKUP_IN']['DATA_IN_FINAL_BACKUPS']) {
                cli_backup_file_until_success($backupFinalsPath . "data_single_routes", ".php", $oldSingleRouteFile);
                cli_backup_file_until_success($backupFinalsPath . "data_middleware_routes", ".php", $oldSingleRouteMiddlewareFile);
            }


            // Then build and output new route file
            $compiledDataRoutes = cli_build_compiled_routes($singleRoutesData['ROUTES'], $middlewareRoutesData['MIDDLEWARES']);
            cli_output_compiled_routes($compiledDataRoutes, "troute_data");
            cli_success("Compiled Only Data routes!");
        },
        'only_page' => function () use ($singleRoutesPage, $middlewareRoutesPage, $exactFiles, $dirs, $settings) {
            // Backup the old route file first
            $oldRouteFile = $exactFiles['troute_page'];
            $oldSingleRouteFile = $exactFiles['single_page'];
            $oldSingleRouteMiddlewareFile = $exactFiles['single_middlewares_page'];
            $backupRoutePath = $dirs['backups_pages'];
            $backupCompiledPath = $dirs['backups_compiled'];
            $backupFinalsPath = $dirs['backups_finals'];

            if ($settings['ALWAYS_BACKUP_IN']['COMPILED_IN_BACKUPS']) {
                cli_backup_file_until_success($backupCompiledPath . "troute_page", ".php", $oldRouteFile);
            }
            if ($settings['ALWAYS_BACKUP_IN']['COMPILED_IN_FINAL_BACKUPS']) {
                cli_backup_file_until_success($backupFinalsPath . "troute_page", ".php", $oldRouteFile);
            }

            if ($settings['ALWAYS_BACKUP_IN']['PAGES_IN_BACKUPS']) {
                cli_backup_file_until_success($backupRoutePath . "page_single_routes", ".php", $oldSingleRouteFile);
                cli_backup_file_until_success($backupRoutePath . "page_middleware_routes", ".php", $oldSingleRouteMiddlewareFile);
            }
            if ($settings['ALWAYS_BACKUP_IN']['PAGES_IN_FINAL_BACKUPS']) {
                cli_backup_file_until_success($backupFinalsPath . "page_single_routes", ".php", $oldSingleRouteFile);
                cli_backup_file_until_success($backupFinalsPath . "page_middleware_routes", ".php", $oldSingleRouteMiddlewareFile);
            }

            // Then build and output new route file
            $compiledPageRoutes = cli_build_compiled_routes($singleRoutesPage['ROUTES'], $middlewareRoutesPage['MIDDLEWARES']);
            cli_output_compiled_routes($compiledPageRoutes, "troute_page");
            cli_success("Compiled Only Page routes!");
        },
        'help' => function () {
            cli_info_multiline("FunkCLI - Compile Help");
            cli_info_multiline("Usage: funkcli compile [all_routes|only_[route|page|data]]");
            cli_info_multiline("The different values:");
            cli_info_multiline("  all_routes - Compiles all routes");
            cli_info_multiline("  only_route - Compiles only route routes");
            cli_info_multiline("  only_page - Compiles only page routes");
            cli_info_multiline("  only_data - Compiles only data routes");
            cli_info_multiline("  These files end up in: funkphp/_internals/compiled/");
            cli_info_multiline("***IMPORTANT 1*** This overwrites the current Troute Files!!!");
            cli_info_multiline("***IMPORTANT 2*** Files are Backed Up in _funkphp/_BACKUPS/compiled/ & _BACKUPS/_FINAL_BACKUPS/!!!");
            exit;
        },
    ],
    'add' => [
        // Adding to ALL Routes at the same time (Route, Data, Page)
        'all_routes' => function () use (
            $argv,
            $outPutDir,
            $settings,
            $dirs,
            $singleRoutesRoute,
            $singleRoutesPage,
            $singleRoutesData,
        ) {
            if (!isset($argv[3]) || !is_string($argv[3]) || empty($argv[3]) || !isset($argv[4]) || !is_string($argv[4]) || empty($argv[4])) {
                cli_err_syntax("No FunkPHP Command was given?!\nShould be at least four(4) non-empty string arguments!");
            }

            // Prepare the route string by trimming, validating starting, ending and middle parts of it
            $addRoute = trim(strtolower($argv[3]));
            echo "\nROUTE BEFORE PARSE: " . "\"$addRoute\"" . "\n";
            [$method, $validRoute] = cli_prepare_valid_route_string($addRoute);

            // Check Route is not used currently in ALL 3 Main Single Route Files!
            if (isset($singleRoutesRoute['ROUTES'][$method][$validRoute]) ?? null) {
                cli_err_syntax("\"$validRoute\" already exists in $method/Single Route Routes!");
            } elseif (isset($singleRoutesData['ROUTES'][$method][$validRoute]) ?? null) {
                cli_err_syntax("\"$validRoute\" already exists in $method/Single Data Routes!");
            } elseif (isset($singleRoutesPage['ROUTES'][$method][$validRoute]) ?? null) {
                cli_err_syntax("\"$validRoute\" already exists in $method/Single Page Routes!");
            }

            // TODO: Add the route to the correct file based on the method and route type
            // and also handler to the "handler" array in the route file and create a handler
            // file with the name ($argv[4]) in the correct directory (routes, data, pages).
            // Check now that handler $argv[4] is a string containg only letters, numbers and underscores!
            if (!preg_match('/^[a-zA-Z0-9_]+$/', $argv[4])) {
                cli_err_syntax("\"{$argv[4]}\" - Handler name must be a string containing only letters, numbers and underscores!");
            }
        },
        // Adding Route to only Route Routes
        'only_route' => function () use ($argv, $outPutDir, $settings, $singleRoutesRoute) {
            if (!isset($argv[3]) || !is_string($argv[3]) || empty($argv[3]) || !isset($argv[4]) || !is_string($argv[4]) || empty($argv[4])) {
                cli_err_syntax("No FunkPHP Command was given?!\nShould be at least four(4) non-empty string arguments!");
            }
            // Prepare the route string by trimming, validating starting, ending and middle parts of it
            $addRoute = trim(strtolower($argv[3]));
            echo "\nROUTE BEFORE PARSE: " . "\"$addRoute\"" . "\n";
            [$method, $validRoute] = cli_prepare_valid_route_string($addRoute);

            // Check Route is not used currently in Single Route Routes File!
            if (isset($singleRoutesRoute['ROUTES'][$method][$validRoute]) ?? null) {
                cli_err_syntax("\"$validRoute\" already exists in $method/Single Route Routes!");
            }

            // TODO: Add the route to the correct file based on the method and route type
            if (!preg_match('/^[a-zA-Z0-9_]+$/', $argv[4])) {
                cli_err_syntax("\"{$argv[4]}\" - Handler name must be a string containing only letters, numbers and underscores!");
            }
        },
        // Adding Route to only Data Routes
        'only_data_route' => function () use ($argv, $settings, $singleRoutesData) {
            if (!isset($argv[3]) || !is_string($argv[3]) || empty($argv[3]) || !isset($argv[4]) || !is_string($argv[4]) || empty($argv[4])) {
                cli_err_syntax("No FunkPHP Command was given?!\nShould be at least four(4) non-empty string arguments!");
            }
            // Prepare the route string by trimming, validating starting, ending and middle parts of it
            $addRoute = trim(strtolower($argv[3]));
            echo "\nROUTE BEFORE PARSE: " . "\"$addRoute\"" . "\n";
            [$method, $validRoute] = cli_prepare_valid_route_string($addRoute);

            // Check Route is not used currently in ALL 3 Main Single Route Files!
            if (isset($singleRoutesData['ROUTES'][$method][$validRoute]) ?? null) {
                cli_err_syntax("\"$validRoute\" already exists in $method/Single Data Routes!");
            }

            // TODO: Add the route to the correct file based on the method and route type
            if (!preg_match('/^[a-zA-Z0-9_]+$/', $argv[4])) {
                cli_err_syntax("\"{$argv[4]}\" - Handler name must be a string containing only letters, numbers and underscores!");
            }
        },
        // Adding Route to only Page Routes
        'only_page_route' => function () use ($argv, $settings, $singleRoutesPage) {
            if (!isset($argv[3]) || !is_string($argv[3]) || empty($argv[3]) || !isset($argv[4]) || !is_string($argv[4]) || empty($argv[4])) {
                cli_err_syntax("No FunkPHP Command was given?!\nShould be at least four(4) non-empty string arguments!");
            }
            // Prepare the route string by trimming, validating starting, ending and middle parts of it
            $addRoute = trim(strtolower($argv[3]));
            echo "\nROUTE BEFORE PARSE: " . "\"$addRoute\"" . "\n";
            [$method, $validRoute] = cli_prepare_valid_route_string($addRoute);

            // Check Route is not used currently in ALL 3 Main Single Route Files!
            if (isset($singleRoutesPage['ROUTES'][$method][$validRoute]) ?? null) {
                cli_err_syntax("\"$validRoute\" already exists in $method/Single Page Routes!");
            }

            // TODO: Add the route to the correct file based on the method and route type
            if (!preg_match('/^[a-zA-Z0-9_]+$/', $argv[4])) {
                cli_err_syntax("\"{$argv[4]}\" - Handler name must be a string containing only letters, numbers and underscores!");
            }
        },
        'mw_route' => function () use ($argv, $outPutDir, $settings, $singleRoutesRoute) {},
        'mw_data' => function () use ($argv, $outPutDir, $settings, $singleRoutesData) {},
        'mw_page' => function () use ($argv, $outPutDir, $settings, $singleRoutesPage) {},
    ],
    'change' => [
        'route' => function () use ($argv, $settings) {
            if (!isset($argv[3])) {
                cli_err_syntax("No FunkPHP Command was given?!\nShould be at least three arguments!");
            }
            cli_info("[INFO]: Changing route routes (not implemented yet)");
        },
        'page' => function () use ($argv, $settings) {
            if (!isset($argv[3])) {
                cli_err_syntax("No FunkPHP Command was given?!\nShould be at least three arguments!");
            }
            cli_info("[INFO]: Changing page routes (not implemented yet)");
        },
        'data' => function () use ($argv, $settings) {
            if (!isset($argv[3])) {
                cli_err_syntax("No FunkPHP Command was given?!\nShould be at least three arguments!");
            }
            cli_info("[INFO]: Changing data routes (not implemented yet)");
        },
    ],
    'delete' => [
        'all_route_compiled_and_singles' => function () use ($argv, $settings) {

            cli_info("[INFO]: Deleting route routes (not implemented yet)");
        },
        // This deletes all backups in the _BACKUPS/compiled, _BACKUPS/data, _BACKUPS/pages
        // & _BACKUPS/routes Subfolders are not deleted such as _BACKUPS/routes/MW/ etc.
        'all_backups_compiled_and_single_files_i_know_files_will_be_hard_to_get_back' => function () use ($dirs, $settings) {
            $backupCompiledPath = $dirs['backups_compiled'];
            $backupRoutePath = $dirs['backups_routes'];
            $backupDataPath = $dirs['backups_data'];
            $backupPagePath = $dirs['backups_pages'];
            cli_delete_all_files_in_directory_except_other_directories($backupCompiledPath);
            cli_delete_all_files_in_directory_except_other_directories($backupRoutePath);
            cli_delete_all_files_in_directory_except_other_directories($backupDataPath);
            cli_delete_all_files_in_directory_except_other_directories($backupPagePath);
        },
        // This deletes all final backups in the _BACKUPS/_FINAL_BACKUPS ONLY!
        // So, it does NOT delete any other (sub)folders with files in _BACKUPS/
        'all_backups_finals_files_i_know_files_will_be_hard_to_get_back' => function () use ($dirs, $settings) {
            $backupFinalsPath = $dirs['backups_finals'];
            cli_delete_all_files_in_directory_except_other_directories($backupFinalsPath);
        },
        // Yes, this deletes EVERYTHING BACKUPED. So, think twice before using it!!!
        'all_all_backups_files_i_know_files_will_be_hard_to_get_back_and_i_will_cry' => function () use ($dirs, $settings) {
            if ($settings['ALLOW_COMPLETE_BACKUP_DELETION'] == false) {
                cli_err_syntax("By default, you are not allowed to delete all backups including final backups! First set ALLOW_COMPLETE_BACKUP_DELETION to true in the settings file (\"src/FunkCLI_Settings\")!");
                exit;
            }
            $backupCompiledPath = $dirs['backups_compiled'];
            $backupRoutePath = $dirs['backups_routes'];
            $backupDataPath = $dirs['backups_data'];
            $backupPagePath = $dirs['backups_pages'];
            $backupFinalsPath = $dirs['backups_finals'];
            cli_delete_all_files_in_directory_except_other_directories($backupCompiledPath);
            cli_delete_all_files_in_directory_except_other_directories($backupRoutePath);
            cli_delete_all_files_in_directory_except_other_directories($backupDataPath);
            cli_delete_all_files_in_directory_except_other_directories($backupPagePath);
            cli_delete_all_files_in_directory_except_other_directories($backupFinalsPath);
        },
    ],
    'restore' => [
        'all_routes_compiled_and_singles_files' => function () use ($argv, $dirs, $exactFiles, $settings) {
            // Grab backup dir and restore exact file path
            $oldRouteFileDir = $dirs['backups_compiled'];
            $oldSingleRouteFileDir = $dirs['backups_routes'];
            $exactRestorePathTroute = $exactFiles['troute_route'];
            $exactRestorePathSingleRoute = $exactFiles['single_routes'];
            $exactRestorePathSingleMiddlwaresRoute = $exactFiles['single_middlewares'];
            cli_restore_file($oldRouteFileDir, $exactRestorePathTroute, "troute_route");
            cli_restore_file($oldSingleRouteFileDir, $exactRestorePathSingleRoute, "route_single_routes");
            cli_restore_file($oldSingleRouteFileDir, $exactRestorePathSingleMiddlwaresRoute, "route_middleware_routes");

            // Grab backup dir and restore exact file path
            $oldRouteFileDir = $dirs['backups_compiled'];
            $oldSingleRouteFileDir = $dirs['backups_data'];
            $exactRestorePathTroute = $exactFiles['troute_data'];
            $exactRestorePathSingleRoute = $exactFiles['single_data'];
            $exactRestorePathSingleMiddlwaresRoute = $exactFiles['single_middlewares_data'];
            cli_restore_file($oldRouteFileDir, $exactRestorePathTroute, "troute_data");
            cli_restore_file($oldSingleRouteFileDir, $exactRestorePathSingleRoute, "data_single_routes");
            cli_restore_file($oldSingleRouteFileDir, $exactRestorePathSingleMiddlwaresRoute, "data_middleware_routes");

            // Grab backup dir and restore exact file path
            $oldRouteFileDir = $dirs['backups_compiled'];
            $oldSingleRouteFileDir = $dirs['backups_pages'];
            $exactRestorePathTroute = $exactFiles['troute_page'];
            $exactRestorePathSingleRoute = $exactFiles['single_page'];
            $exactRestorePathSingleMiddlwaresRoute = $exactFiles['single_middlewares_page'];
            cli_restore_file($oldRouteFileDir, $exactRestorePathTroute, "troute_page");
            cli_restore_file($oldSingleRouteFileDir, $exactRestorePathSingleRoute, "page_single_routes");
            cli_restore_file($oldSingleRouteFileDir, $exactRestorePathSingleMiddlwaresRoute, "page_middleware_routes");
        },
        'route_compiled_and_singles_files' => function () use ($argv, $dirs, $exactFiles, $settings) {
            // Grab backup dir and restore exact file path
            $oldRouteFileDir = $dirs['backups_compiled'];
            $oldSingleRouteFileDir = $dirs['backups_routes'];
            $exactRestorePathTroute = $exactFiles['troute_route'];
            $exactRestorePathSingleRoute = $exactFiles['single_routes'];
            $exactRestorePathSingleMiddlwaresRoute = $exactFiles['single_middlewares'];
            cli_restore_file($oldRouteFileDir, $exactRestorePathTroute, "troute_route");
            cli_restore_file($oldSingleRouteFileDir, $exactRestorePathSingleRoute, "route_single_routes");
            cli_restore_file($oldSingleRouteFileDir, $exactRestorePathSingleMiddlwaresRoute, "route_middleware_routes");
        },
        'data_compiled_and_singles_files' => function () use ($argv, $dirs, $exactFiles, $settings) {

            // Grab backup dir and restore exact file path
            $oldRouteFileDir = $dirs['backups_compiled'];
            $oldSingleRouteFileDir = $dirs['backups_data'];
            $exactRestorePathTroute = $exactFiles['troute_data'];
            $exactRestorePathSingleRoute = $exactFiles['single_data'];
            $exactRestorePathSingleMiddlwaresRoute = $exactFiles['single_middlewares_data'];

            cli_restore_file($oldRouteFileDir, $exactRestorePathTroute, "troute_data");
            cli_restore_file($oldSingleRouteFileDir, $exactRestorePathSingleRoute, "data_single_routes");
            cli_restore_file($oldSingleRouteFileDir, $exactRestorePathSingleMiddlwaresRoute, "data_middleware_routes");
        },
        'page_compiled_and_singles_files' => function () use ($argv, $dirs, $exactFiles, $settings) {
            // Grab backup dir and restore exact file path
            $oldRouteFileDir = $dirs['backups_compiled'];
            $oldSingleRouteFileDir = $dirs['backups_pages'];
            $exactRestorePathTroute = $exactFiles['troute_page'];
            $exactRestorePathSingleRoute = $exactFiles['single_page'];
            $exactRestorePathSingleMiddlwaresRoute = $exactFiles['single_middlewares_page'];

            cli_restore_file($oldRouteFileDir, $exactRestorePathTroute, "troute_page");
            cli_restore_file($oldSingleRouteFileDir, $exactRestorePathSingleRoute, "page_single_routes");
            cli_restore_file($oldSingleRouteFileDir, $exactRestorePathSingleMiddlwaresRoute, "page_middleware_routes");
        },
        'help' => function () {
            cli_info_multiline("FunkCLI - Restore Help");
            cli_info_multiline("Usage: funkcli restore [route_compiled_and_singles_files|data_compiled_and_singles|page_compiled_and_singles]");
            cli_info_multiline("------------------------------------------");
            cli_info_multiline("The different values:");
            cli_info_multiline("  route_compiled_and_singles_files - Restores Compiled & Single Route (including Middlewares) routes from backup (earliest version)");
            cli_info_multiline("  data_compiled_and_singles_files - Restores Compiled & Single Data (including Middlewares) routes from backup (earliest version)");
            cli_info_multiline("  page_compiled_and_singles_files - Restores Compiled & Single Page (including Middlewares) routes from backup (earliest version)");
            cli_info_multiline("  The Troute files end up in: funkphp/_internals/compiled/");
            cli_info_multiline("  The Single Route (& Middleware) files end up in: funkphp/routes/");
            cli_info_multiline("  The Single Data (& Middleware) files end up in: funkphp/data/");
            cli_info_multiline("  The Single Page (& Middleware) files end up in: funkphp/pages/");
            cli_info_multiline("It uses Backup Paths: 'funkphp/_BACKUPS/compiled/', 'funkphp/_BACKUPS/routes/', 'funkphp/_BACKUPS/data/' & 'funkphp/_BACKUPS/pages/'");
            cli_info_multiline("***IMPORTANT 1*** This overwrites the current Troute, Single & Middleware Files!!!");
            cli_info_multiline("***IMPORTANT 2*** The Same Files In _FINAL_BACKUPS Are NOT Removed After Restoration!!!");
            exit;
        },
    ],

    'help' => function () use ($argv) {
        cli_info_multiline("FunkPHP CLI - Help");
        cli_info_multiline("Usage: funkcli [command] [action] [value]");
        cli_info_multiline("Commands:");
        cli_info_multiline("  compile [all_routes|only_[route|page_route|data_route]] - Compile routes");
        cli_info_multiline("  add [all_routes|only_[route|page_route|data_route]] [value] - Add new routes");
        cli_info_multiline("  change [route|page|data] [oldValue] [newValue]  - Change existing routes");
        cli_info_multiline("  delete [route|page|data] [value] - Delete existing routes");
        exit;
    },
];

// Execute the command with the action if it exists
$command = $argv[1] ?? null;
$action = $argv[2] ?? null;
if (isset($commands[$command]) && $action == null) {
    $commands[$command]();
    exit;
}
if (isset($commands[$command][$action])) {
    $commands[$command][$action]();
    exit;
}

// Catch-all for non-existing commands or actions (or invalid processing of commands)
cli_err_syntax("That FunkCLI Command doesn't exist! Enter ``funkcli help`` for more information!");
exit;
?>